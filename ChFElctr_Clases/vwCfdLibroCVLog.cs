/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.4.0.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Your.Namespace
{
	public class vwCfdLibroCVLog : SqlClientEntity
	{
		public vwCfdLibroCVLog()
		{
			this.QuerySource = "vwCfdLibroCVLog";
			this.MappingName = "vwCfdLibroCVLog";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter YEAR1
			{
				get
				{
					return new SqlParameter("@YEAR1", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter PERIODID
			{
				get
				{
					return new SqlParameter("@PERIODID", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter Periodo
			{
				get
				{
					return new SqlParameter("@Periodo", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Tipo
			{
				get
				{
					return new SqlParameter("@Tipo", SqlDbType.VarChar, 4);
				}
			}
			
			public static SqlParameter Estado
			{
				get
				{
					return new SqlParameter("@Estado", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter MensajeGral
			{
				get
				{
					return new SqlParameter("@MensajeGral", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter EstadoActualBin
			{
				get
				{
					return new SqlParameter("@EstadoActualBin", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter IdxSingleStatus
			{
				get
				{
					return new SqlParameter("@IdxSingleStatus", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter MensajeEActual
			{
				get
				{
					return new SqlParameter("@MensajeEActual", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter ComprobanteXml
			{
				get
				{
					return new SqlParameter("@ComprobanteXml", SqlDbType.Xml, 1073741823);
				}
			}
			
			public static SqlParameter RutaXml
			{
				get
				{
					return new SqlParameter("@RutaXml", SqlDbType.NVarChar, 1073741823);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string YEAR1 = "YEAR1";
            public const string PERIODID = "PERIODID";
            public const string Periodo = "periodo";
            public const string Tipo = "tipo";
            public const string Estado = "estado";
            public const string MensajeGral = "mensajeGral";
            public const string EstadoActualBin = "estadoActualBin";
            public const string IdxSingleStatus = "idxSingleStatus";
            public const string MensajeEActual = "mensajeEActual";
            public const string ComprobanteXml = "comprobanteXml";
            public const string RutaXml = "rutaXml";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[YEAR1] = vwCfdLibroCVLog.PropertyNames.YEAR1;
					ht[PERIODID] = vwCfdLibroCVLog.PropertyNames.PERIODID;
					ht[Periodo] = vwCfdLibroCVLog.PropertyNames.Periodo;
					ht[Tipo] = vwCfdLibroCVLog.PropertyNames.Tipo;
					ht[Estado] = vwCfdLibroCVLog.PropertyNames.Estado;
					ht[MensajeGral] = vwCfdLibroCVLog.PropertyNames.MensajeGral;
					ht[EstadoActualBin] = vwCfdLibroCVLog.PropertyNames.EstadoActualBin;
					ht[IdxSingleStatus] = vwCfdLibroCVLog.PropertyNames.IdxSingleStatus;
					ht[MensajeEActual] = vwCfdLibroCVLog.PropertyNames.MensajeEActual;
					ht[ComprobanteXml] = vwCfdLibroCVLog.PropertyNames.ComprobanteXml;
					ht[RutaXml] = vwCfdLibroCVLog.PropertyNames.RutaXml;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string YEAR1 = "YEAR1";
            public const string PERIODID = "PERIODID";
            public const string Periodo = "Periodo";
            public const string Tipo = "Tipo";
            public const string Estado = "Estado";
            public const string MensajeGral = "MensajeGral";
            public const string EstadoActualBin = "EstadoActualBin";
            public const string IdxSingleStatus = "IdxSingleStatus";
            public const string MensajeEActual = "MensajeEActual";
            public const string ComprobanteXml = "ComprobanteXml";
            public const string RutaXml = "RutaXml";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[YEAR1] = vwCfdLibroCVLog.ColumnNames.YEAR1;
					ht[PERIODID] = vwCfdLibroCVLog.ColumnNames.PERIODID;
					ht[Periodo] = vwCfdLibroCVLog.ColumnNames.Periodo;
					ht[Tipo] = vwCfdLibroCVLog.ColumnNames.Tipo;
					ht[Estado] = vwCfdLibroCVLog.ColumnNames.Estado;
					ht[MensajeGral] = vwCfdLibroCVLog.ColumnNames.MensajeGral;
					ht[EstadoActualBin] = vwCfdLibroCVLog.ColumnNames.EstadoActualBin;
					ht[IdxSingleStatus] = vwCfdLibroCVLog.ColumnNames.IdxSingleStatus;
					ht[MensajeEActual] = vwCfdLibroCVLog.ColumnNames.MensajeEActual;
					ht[ComprobanteXml] = vwCfdLibroCVLog.ColumnNames.ComprobanteXml;
					ht[RutaXml] = vwCfdLibroCVLog.ColumnNames.RutaXml;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string YEAR1 = "s_YEAR1";
            public const string PERIODID = "s_PERIODID";
            public const string Periodo = "s_Periodo";
            public const string Tipo = "s_Tipo";
            public const string Estado = "s_Estado";
            public const string MensajeGral = "s_MensajeGral";
            public const string EstadoActualBin = "s_EstadoActualBin";
            public const string IdxSingleStatus = "s_IdxSingleStatus";
            public const string MensajeEActual = "s_MensajeEActual";
            public const string ComprobanteXml = "s_ComprobanteXml";
            public const string RutaXml = "s_RutaXml";

		}
		#endregion	
		
		#region Properties
			public virtual short YEAR1
	    {
			get
	        {
				return base.Getshort(ColumnNames.YEAR1);
			}
			set
	        {
				base.Setshort(ColumnNames.YEAR1, value);
			}
		}

		public virtual short PERIODID
	    {
			get
	        {
				return base.Getshort(ColumnNames.PERIODID);
			}
			set
	        {
				base.Setshort(ColumnNames.PERIODID, value);
			}
		}

		public virtual int Periodo
	    {
			get
	        {
				return base.Getint(ColumnNames.Periodo);
			}
			set
	        {
				base.Setint(ColumnNames.Periodo, value);
			}
		}

		public virtual string Tipo
	    {
			get
	        {
				return base.Getstring(ColumnNames.Tipo);
			}
			set
	        {
				base.Setstring(ColumnNames.Tipo, value);
			}
		}

		public virtual string Estado
	    {
			get
	        {
				return base.Getstring(ColumnNames.Estado);
			}
			set
	        {
				base.Setstring(ColumnNames.Estado, value);
			}
		}

		public virtual string MensajeGral
	    {
			get
	        {
				return base.Getstring(ColumnNames.MensajeGral);
			}
			set
	        {
				base.Setstring(ColumnNames.MensajeGral, value);
			}
		}

		public virtual string EstadoActualBin
	    {
			get
	        {
				return base.Getstring(ColumnNames.EstadoActualBin);
			}
			set
	        {
				base.Setstring(ColumnNames.EstadoActualBin, value);
			}
		}

		public virtual short IdxSingleStatus
	    {
			get
	        {
				return base.Getshort(ColumnNames.IdxSingleStatus);
			}
			set
	        {
				base.Setshort(ColumnNames.IdxSingleStatus, value);
			}
		}

		public virtual string MensajeEActual
	    {
			get
	        {
				return base.Getstring(ColumnNames.MensajeEActual);
			}
			set
	        {
				base.Setstring(ColumnNames.MensajeEActual, value);
			}
		}

		public virtual string ComprobanteXml
	    {
			get
	        {
				return base.Getstring(ColumnNames.ComprobanteXml);
			}
			set
	        {
				base.Setstring(ColumnNames.ComprobanteXml, value);
			}
		}

		public virtual string RutaXml
	    {
			get
	        {
				return base.Getstring(ColumnNames.RutaXml);
			}
			set
	        {
				base.Setstring(ColumnNames.RutaXml, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_YEAR1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.YEAR1) ? string.Empty : base.GetshortAsString(ColumnNames.YEAR1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.YEAR1);
				else
					this.YEAR1 = base.SetshortAsString(ColumnNames.YEAR1, value);
			}
		}

		public virtual string s_PERIODID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PERIODID) ? string.Empty : base.GetshortAsString(ColumnNames.PERIODID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PERIODID);
				else
					this.PERIODID = base.SetshortAsString(ColumnNames.PERIODID, value);
			}
		}

		public virtual string s_Periodo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Periodo) ? string.Empty : base.GetintAsString(ColumnNames.Periodo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Periodo);
				else
					this.Periodo = base.SetintAsString(ColumnNames.Periodo, value);
			}
		}

		public virtual string s_Tipo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Tipo) ? string.Empty : base.GetstringAsString(ColumnNames.Tipo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Tipo);
				else
					this.Tipo = base.SetstringAsString(ColumnNames.Tipo, value);
			}
		}

		public virtual string s_Estado
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Estado) ? string.Empty : base.GetstringAsString(ColumnNames.Estado);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Estado);
				else
					this.Estado = base.SetstringAsString(ColumnNames.Estado, value);
			}
		}

		public virtual string s_MensajeGral
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MensajeGral) ? string.Empty : base.GetstringAsString(ColumnNames.MensajeGral);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MensajeGral);
				else
					this.MensajeGral = base.SetstringAsString(ColumnNames.MensajeGral, value);
			}
		}

		public virtual string s_EstadoActualBin
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EstadoActualBin) ? string.Empty : base.GetstringAsString(ColumnNames.EstadoActualBin);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EstadoActualBin);
				else
					this.EstadoActualBin = base.SetstringAsString(ColumnNames.EstadoActualBin, value);
			}
		}

		public virtual string s_IdxSingleStatus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IdxSingleStatus) ? string.Empty : base.GetshortAsString(ColumnNames.IdxSingleStatus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IdxSingleStatus);
				else
					this.IdxSingleStatus = base.SetshortAsString(ColumnNames.IdxSingleStatus, value);
			}
		}

		public virtual string s_MensajeEActual
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MensajeEActual) ? string.Empty : base.GetstringAsString(ColumnNames.MensajeEActual);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MensajeEActual);
				else
					this.MensajeEActual = base.SetstringAsString(ColumnNames.MensajeEActual, value);
			}
		}

		public virtual string s_ComprobanteXml
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ComprobanteXml) ? string.Empty : base.GetstringAsString(ColumnNames.ComprobanteXml);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ComprobanteXml);
				else
					this.ComprobanteXml = base.SetstringAsString(ColumnNames.ComprobanteXml, value);
			}
		}

		public virtual string s_RutaXml
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RutaXml) ? string.Empty : base.GetstringAsString(ColumnNames.RutaXml);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RutaXml);
				else
					this.RutaXml = base.SetstringAsString(ColumnNames.RutaXml, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter YEAR1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.YEAR1, Parameters.YEAR1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PERIODID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PERIODID, Parameters.PERIODID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Periodo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Periodo, Parameters.Periodo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Tipo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Tipo, Parameters.Tipo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Estado
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Estado, Parameters.Estado);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MensajeGral
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MensajeGral, Parameters.MensajeGral);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EstadoActualBin
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EstadoActualBin, Parameters.EstadoActualBin);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IdxSingleStatus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IdxSingleStatus, Parameters.IdxSingleStatus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MensajeEActual
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MensajeEActual, Parameters.MensajeEActual);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ComprobanteXml
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ComprobanteXml, Parameters.ComprobanteXml);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RutaXml
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RutaXml, Parameters.RutaXml);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter YEAR1
		    {
				get
		        {
					if(_YEAR1_W == null)
	        	    {
						_YEAR1_W = TearOff.YEAR1;
					}
					return _YEAR1_W;
				}
			}

			public WhereParameter PERIODID
		    {
				get
		        {
					if(_PERIODID_W == null)
	        	    {
						_PERIODID_W = TearOff.PERIODID;
					}
					return _PERIODID_W;
				}
			}

			public WhereParameter Periodo
		    {
				get
		        {
					if(_Periodo_W == null)
	        	    {
						_Periodo_W = TearOff.Periodo;
					}
					return _Periodo_W;
				}
			}

			public WhereParameter Tipo
		    {
				get
		        {
					if(_Tipo_W == null)
	        	    {
						_Tipo_W = TearOff.Tipo;
					}
					return _Tipo_W;
				}
			}

			public WhereParameter Estado
		    {
				get
		        {
					if(_Estado_W == null)
	        	    {
						_Estado_W = TearOff.Estado;
					}
					return _Estado_W;
				}
			}

			public WhereParameter MensajeGral
		    {
				get
		        {
					if(_MensajeGral_W == null)
	        	    {
						_MensajeGral_W = TearOff.MensajeGral;
					}
					return _MensajeGral_W;
				}
			}

			public WhereParameter EstadoActualBin
		    {
				get
		        {
					if(_EstadoActualBin_W == null)
	        	    {
						_EstadoActualBin_W = TearOff.EstadoActualBin;
					}
					return _EstadoActualBin_W;
				}
			}

			public WhereParameter IdxSingleStatus
		    {
				get
		        {
					if(_IdxSingleStatus_W == null)
	        	    {
						_IdxSingleStatus_W = TearOff.IdxSingleStatus;
					}
					return _IdxSingleStatus_W;
				}
			}

			public WhereParameter MensajeEActual
		    {
				get
		        {
					if(_MensajeEActual_W == null)
	        	    {
						_MensajeEActual_W = TearOff.MensajeEActual;
					}
					return _MensajeEActual_W;
				}
			}

			public WhereParameter ComprobanteXml
		    {
				get
		        {
					if(_ComprobanteXml_W == null)
	        	    {
						_ComprobanteXml_W = TearOff.ComprobanteXml;
					}
					return _ComprobanteXml_W;
				}
			}

			public WhereParameter RutaXml
		    {
				get
		        {
					if(_RutaXml_W == null)
	        	    {
						_RutaXml_W = TearOff.RutaXml;
					}
					return _RutaXml_W;
				}
			}

			private WhereParameter _YEAR1_W = null;
			private WhereParameter _PERIODID_W = null;
			private WhereParameter _Periodo_W = null;
			private WhereParameter _Tipo_W = null;
			private WhereParameter _Estado_W = null;
			private WhereParameter _MensajeGral_W = null;
			private WhereParameter _EstadoActualBin_W = null;
			private WhereParameter _IdxSingleStatus_W = null;
			private WhereParameter _MensajeEActual_W = null;
			private WhereParameter _ComprobanteXml_W = null;
			private WhereParameter _RutaXml_W = null;

			public void WhereClauseReset()
			{
				_YEAR1_W = null;
				_PERIODID_W = null;
				_Periodo_W = null;
				_Tipo_W = null;
				_Estado_W = null;
				_MensajeGral_W = null;
				_EstadoActualBin_W = null;
				_IdxSingleStatus_W = null;
				_MensajeEActual_W = null;
				_ComprobanteXml_W = null;
				_RutaXml_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter YEAR1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.YEAR1, Parameters.YEAR1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PERIODID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PERIODID, Parameters.PERIODID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Periodo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Periodo, Parameters.Periodo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Tipo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Tipo, Parameters.Tipo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Estado
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Estado, Parameters.Estado);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MensajeGral
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MensajeGral, Parameters.MensajeGral);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EstadoActualBin
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EstadoActualBin, Parameters.EstadoActualBin);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IdxSingleStatus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IdxSingleStatus, Parameters.IdxSingleStatus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MensajeEActual
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MensajeEActual, Parameters.MensajeEActual);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ComprobanteXml
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ComprobanteXml, Parameters.ComprobanteXml);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RutaXml
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RutaXml, Parameters.RutaXml);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter YEAR1
		    {
				get
		        {
					if(_YEAR1_W == null)
	        	    {
						_YEAR1_W = TearOff.YEAR1;
					}
					return _YEAR1_W;
				}
			}

			public AggregateParameter PERIODID
		    {
				get
		        {
					if(_PERIODID_W == null)
	        	    {
						_PERIODID_W = TearOff.PERIODID;
					}
					return _PERIODID_W;
				}
			}

			public AggregateParameter Periodo
		    {
				get
		        {
					if(_Periodo_W == null)
	        	    {
						_Periodo_W = TearOff.Periodo;
					}
					return _Periodo_W;
				}
			}

			public AggregateParameter Tipo
		    {
				get
		        {
					if(_Tipo_W == null)
	        	    {
						_Tipo_W = TearOff.Tipo;
					}
					return _Tipo_W;
				}
			}

			public AggregateParameter Estado
		    {
				get
		        {
					if(_Estado_W == null)
	        	    {
						_Estado_W = TearOff.Estado;
					}
					return _Estado_W;
				}
			}

			public AggregateParameter MensajeGral
		    {
				get
		        {
					if(_MensajeGral_W == null)
	        	    {
						_MensajeGral_W = TearOff.MensajeGral;
					}
					return _MensajeGral_W;
				}
			}

			public AggregateParameter EstadoActualBin
		    {
				get
		        {
					if(_EstadoActualBin_W == null)
	        	    {
						_EstadoActualBin_W = TearOff.EstadoActualBin;
					}
					return _EstadoActualBin_W;
				}
			}

			public AggregateParameter IdxSingleStatus
		    {
				get
		        {
					if(_IdxSingleStatus_W == null)
	        	    {
						_IdxSingleStatus_W = TearOff.IdxSingleStatus;
					}
					return _IdxSingleStatus_W;
				}
			}

			public AggregateParameter MensajeEActual
		    {
				get
		        {
					if(_MensajeEActual_W == null)
	        	    {
						_MensajeEActual_W = TearOff.MensajeEActual;
					}
					return _MensajeEActual_W;
				}
			}

			public AggregateParameter ComprobanteXml
		    {
				get
		        {
					if(_ComprobanteXml_W == null)
	        	    {
						_ComprobanteXml_W = TearOff.ComprobanteXml;
					}
					return _ComprobanteXml_W;
				}
			}

			public AggregateParameter RutaXml
		    {
				get
		        {
					if(_RutaXml_W == null)
	        	    {
						_RutaXml_W = TearOff.RutaXml;
					}
					return _RutaXml_W;
				}
			}

			private AggregateParameter _YEAR1_W = null;
			private AggregateParameter _PERIODID_W = null;
			private AggregateParameter _Periodo_W = null;
			private AggregateParameter _Tipo_W = null;
			private AggregateParameter _Estado_W = null;
			private AggregateParameter _MensajeGral_W = null;
			private AggregateParameter _EstadoActualBin_W = null;
			private AggregateParameter _IdxSingleStatus_W = null;
			private AggregateParameter _MensajeEActual_W = null;
			private AggregateParameter _ComprobanteXml_W = null;
			private AggregateParameter _RutaXml_W = null;

			public void AggregateClauseReset()
			{
				_YEAR1_W = null;
				_PERIODID_W = null;
				_Periodo_W = null;
				_Tipo_W = null;
				_Estado_W = null;
				_MensajeGral_W = null;
				_EstadoActualBin_W = null;
				_IdxSingleStatus_W = null;
				_MensajeEActual_W = null;
				_ComprobanteXml_W = null;
				_RutaXml_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
