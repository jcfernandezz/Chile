/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.4.0.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace Your.Namespace
{
	public class vwCfdDocumentosAImprimir : SqlClientEntity
	{
		public vwCfdDocumentosAImprimir()
		{
			this.QuerySource = "vwCfdDocumentosAImprimir";
			this.MappingName = "vwCfdDocumentosAImprimir";
		}	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Soptype
			{
				get
				{
					return new SqlParameter("@Soptype", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter Docid
			{
				get
				{
					return new SqlParameter("@Docid", SqlDbType.VarChar, 15);
				}
			}
			
			public static SqlParameter Sopnumbe
			{
				get
				{
					return new SqlParameter("@Sopnumbe", SqlDbType.VarChar, 21);
				}
			}
			
			public static SqlParameter FechaHoraEmision
			{
				get
				{
					return new SqlParameter("@FechaHoraEmision", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter RfcReceptor
			{
				get
				{
					return new SqlParameter("@RfcReceptor", SqlDbType.VarChar, 8000);
				}
			}
			
			public static SqlParameter NombreCliente
			{
				get
				{
					return new SqlParameter("@NombreCliente", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter Total
			{
				get
				{
					return new SqlParameter("@Total", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter FormaDePago
			{
				get
				{
					return new SqlParameter("@FormaDePago", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter MetodoDePago
			{
				get
				{
					return new SqlParameter("@MetodoDePago", SqlDbType.VarChar, 21);
				}
			}
			
			public static SqlParameter NumCtaPago
			{
				get
				{
					return new SqlParameter("@NumCtaPago", SqlDbType.VarChar, 21);
				}
			}
			
			public static SqlParameter USERDEF1
			{
				get
				{
					return new SqlParameter("@USERDEF1", SqlDbType.VarChar, 21);
				}
			}
			
			public static SqlParameter FolioFiscal
			{
				get
				{
					return new SqlParameter("@FolioFiscal", SqlDbType.VarChar, 50);
				}
			}
			
			public static SqlParameter NoCertificadoCSD
			{
				get
				{
					return new SqlParameter("@NoCertificadoCSD", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter Version
			{
				get
				{
					return new SqlParameter("@Version", SqlDbType.VarChar, 5);
				}
			}
			
			public static SqlParameter SelloCFD
			{
				get
				{
					return new SqlParameter("@SelloCFD", SqlDbType.VarChar, 8000);
				}
			}
			
			public static SqlParameter SelloSAT
			{
				get
				{
					return new SqlParameter("@SelloSAT", SqlDbType.VarChar, 8000);
				}
			}
			
			public static SqlParameter CadenaOriginalSAT
			{
				get
				{
					return new SqlParameter("@CadenaOriginalSAT", SqlDbType.VarChar, 8000);
				}
			}
			
			public static SqlParameter NoCertificadoSAT
			{
				get
				{
					return new SqlParameter("@NoCertificadoSAT", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter FechaTimbrado
			{
				get
				{
					return new SqlParameter("@FechaTimbrado", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter RutaYNomArchivo
			{
				get
				{
					return new SqlParameter("@RutaYNomArchivo", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter RutaYNomArchivoNet
			{
				get
				{
					return new SqlParameter("@RutaYNomArchivoNet", SqlDbType.NVarChar, 1073741823);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Soptype = "soptype";
            public const string Docid = "docid";
            public const string Sopnumbe = "sopnumbe";
            public const string FechaHoraEmision = "fechaHoraEmision";
            public const string RfcReceptor = "rfcReceptor";
            public const string NombreCliente = "nombreCliente";
            public const string Total = "total";
            public const string FormaDePago = "formaDePago";
            public const string MetodoDePago = "metodoDePago";
            public const string NumCtaPago = "NumCtaPago";
            public const string USERDEF1 = "USERDEF1";
            public const string FolioFiscal = "folioFiscal";
            public const string NoCertificadoCSD = "noCertificadoCSD";
            public const string Version = "version";
            public const string SelloCFD = "selloCFD";
            public const string SelloSAT = "selloSAT";
            public const string CadenaOriginalSAT = "cadenaOriginalSAT";
            public const string NoCertificadoSAT = "noCertificadoSAT";
            public const string FechaTimbrado = "FechaTimbrado";
            public const string RutaYNomArchivo = "rutaYNomArchivo";
            public const string RutaYNomArchivoNet = "rutaYNomArchivoNet";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Soptype] = vwCfdDocumentosAImprimir.PropertyNames.Soptype;
					ht[Docid] = vwCfdDocumentosAImprimir.PropertyNames.Docid;
					ht[Sopnumbe] = vwCfdDocumentosAImprimir.PropertyNames.Sopnumbe;
					ht[FechaHoraEmision] = vwCfdDocumentosAImprimir.PropertyNames.FechaHoraEmision;
					ht[RfcReceptor] = vwCfdDocumentosAImprimir.PropertyNames.RfcReceptor;
					ht[NombreCliente] = vwCfdDocumentosAImprimir.PropertyNames.NombreCliente;
					ht[Total] = vwCfdDocumentosAImprimir.PropertyNames.Total;
					ht[FormaDePago] = vwCfdDocumentosAImprimir.PropertyNames.FormaDePago;
					ht[MetodoDePago] = vwCfdDocumentosAImprimir.PropertyNames.MetodoDePago;
					ht[NumCtaPago] = vwCfdDocumentosAImprimir.PropertyNames.NumCtaPago;
					ht[USERDEF1] = vwCfdDocumentosAImprimir.PropertyNames.USERDEF1;
					ht[FolioFiscal] = vwCfdDocumentosAImprimir.PropertyNames.FolioFiscal;
					ht[NoCertificadoCSD] = vwCfdDocumentosAImprimir.PropertyNames.NoCertificadoCSD;
					ht[Version] = vwCfdDocumentosAImprimir.PropertyNames.Version;
					ht[SelloCFD] = vwCfdDocumentosAImprimir.PropertyNames.SelloCFD;
					ht[SelloSAT] = vwCfdDocumentosAImprimir.PropertyNames.SelloSAT;
					ht[CadenaOriginalSAT] = vwCfdDocumentosAImprimir.PropertyNames.CadenaOriginalSAT;
					ht[NoCertificadoSAT] = vwCfdDocumentosAImprimir.PropertyNames.NoCertificadoSAT;
					ht[FechaTimbrado] = vwCfdDocumentosAImprimir.PropertyNames.FechaTimbrado;
					ht[RutaYNomArchivo] = vwCfdDocumentosAImprimir.PropertyNames.RutaYNomArchivo;
					ht[RutaYNomArchivoNet] = vwCfdDocumentosAImprimir.PropertyNames.RutaYNomArchivoNet;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Soptype = "Soptype";
            public const string Docid = "Docid";
            public const string Sopnumbe = "Sopnumbe";
            public const string FechaHoraEmision = "FechaHoraEmision";
            public const string RfcReceptor = "RfcReceptor";
            public const string NombreCliente = "NombreCliente";
            public const string Total = "Total";
            public const string FormaDePago = "FormaDePago";
            public const string MetodoDePago = "MetodoDePago";
            public const string NumCtaPago = "NumCtaPago";
            public const string USERDEF1 = "USERDEF1";
            public const string FolioFiscal = "FolioFiscal";
            public const string NoCertificadoCSD = "NoCertificadoCSD";
            public const string Version = "Version";
            public const string SelloCFD = "SelloCFD";
            public const string SelloSAT = "SelloSAT";
            public const string CadenaOriginalSAT = "CadenaOriginalSAT";
            public const string NoCertificadoSAT = "NoCertificadoSAT";
            public const string FechaTimbrado = "FechaTimbrado";
            public const string RutaYNomArchivo = "RutaYNomArchivo";
            public const string RutaYNomArchivoNet = "RutaYNomArchivoNet";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Soptype] = vwCfdDocumentosAImprimir.ColumnNames.Soptype;
					ht[Docid] = vwCfdDocumentosAImprimir.ColumnNames.Docid;
					ht[Sopnumbe] = vwCfdDocumentosAImprimir.ColumnNames.Sopnumbe;
					ht[FechaHoraEmision] = vwCfdDocumentosAImprimir.ColumnNames.FechaHoraEmision;
					ht[RfcReceptor] = vwCfdDocumentosAImprimir.ColumnNames.RfcReceptor;
					ht[NombreCliente] = vwCfdDocumentosAImprimir.ColumnNames.NombreCliente;
					ht[Total] = vwCfdDocumentosAImprimir.ColumnNames.Total;
					ht[FormaDePago] = vwCfdDocumentosAImprimir.ColumnNames.FormaDePago;
					ht[MetodoDePago] = vwCfdDocumentosAImprimir.ColumnNames.MetodoDePago;
					ht[NumCtaPago] = vwCfdDocumentosAImprimir.ColumnNames.NumCtaPago;
					ht[USERDEF1] = vwCfdDocumentosAImprimir.ColumnNames.USERDEF1;
					ht[FolioFiscal] = vwCfdDocumentosAImprimir.ColumnNames.FolioFiscal;
					ht[NoCertificadoCSD] = vwCfdDocumentosAImprimir.ColumnNames.NoCertificadoCSD;
					ht[Version] = vwCfdDocumentosAImprimir.ColumnNames.Version;
					ht[SelloCFD] = vwCfdDocumentosAImprimir.ColumnNames.SelloCFD;
					ht[SelloSAT] = vwCfdDocumentosAImprimir.ColumnNames.SelloSAT;
					ht[CadenaOriginalSAT] = vwCfdDocumentosAImprimir.ColumnNames.CadenaOriginalSAT;
					ht[NoCertificadoSAT] = vwCfdDocumentosAImprimir.ColumnNames.NoCertificadoSAT;
					ht[FechaTimbrado] = vwCfdDocumentosAImprimir.ColumnNames.FechaTimbrado;
					ht[RutaYNomArchivo] = vwCfdDocumentosAImprimir.ColumnNames.RutaYNomArchivo;
					ht[RutaYNomArchivoNet] = vwCfdDocumentosAImprimir.ColumnNames.RutaYNomArchivoNet;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Soptype = "s_Soptype";
            public const string Docid = "s_Docid";
            public const string Sopnumbe = "s_Sopnumbe";
            public const string FechaHoraEmision = "s_FechaHoraEmision";
            public const string RfcReceptor = "s_RfcReceptor";
            public const string NombreCliente = "s_NombreCliente";
            public const string Total = "s_Total";
            public const string FormaDePago = "s_FormaDePago";
            public const string MetodoDePago = "s_MetodoDePago";
            public const string NumCtaPago = "s_NumCtaPago";
            public const string USERDEF1 = "s_USERDEF1";
            public const string FolioFiscal = "s_FolioFiscal";
            public const string NoCertificadoCSD = "s_NoCertificadoCSD";
            public const string Version = "s_Version";
            public const string SelloCFD = "s_SelloCFD";
            public const string SelloSAT = "s_SelloSAT";
            public const string CadenaOriginalSAT = "s_CadenaOriginalSAT";
            public const string NoCertificadoSAT = "s_NoCertificadoSAT";
            public const string FechaTimbrado = "s_FechaTimbrado";
            public const string RutaYNomArchivo = "s_RutaYNomArchivo";
            public const string RutaYNomArchivoNet = "s_RutaYNomArchivoNet";

		}
		#endregion	
		
		#region Properties
			public virtual short Soptype
	    {
			get
	        {
				return base.Getshort(ColumnNames.Soptype);
			}
			set
	        {
				base.Setshort(ColumnNames.Soptype, value);
			}
		}

		public virtual string Docid
	    {
			get
	        {
				return base.Getstring(ColumnNames.Docid);
			}
			set
	        {
				base.Setstring(ColumnNames.Docid, value);
			}
		}

		public virtual string Sopnumbe
	    {
			get
	        {
				return base.Getstring(ColumnNames.Sopnumbe);
			}
			set
	        {
				base.Setstring(ColumnNames.Sopnumbe, value);
			}
		}

		public virtual DateTime FechaHoraEmision
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.FechaHoraEmision);
			}
			set
	        {
				base.SetDateTime(ColumnNames.FechaHoraEmision, value);
			}
		}

		public virtual string RfcReceptor
	    {
			get
	        {
				return base.Getstring(ColumnNames.RfcReceptor);
			}
			set
	        {
				base.Setstring(ColumnNames.RfcReceptor, value);
			}
		}

		public virtual string NombreCliente
	    {
			get
	        {
				return base.Getstring(ColumnNames.NombreCliente);
			}
			set
	        {
				base.Setstring(ColumnNames.NombreCliente, value);
			}
		}

		public virtual decimal Total
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Total);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Total, value);
			}
		}

		public virtual string FormaDePago
	    {
			get
	        {
				return base.Getstring(ColumnNames.FormaDePago);
			}
			set
	        {
				base.Setstring(ColumnNames.FormaDePago, value);
			}
		}

		public virtual string MetodoDePago
	    {
			get
	        {
				return base.Getstring(ColumnNames.MetodoDePago);
			}
			set
	        {
				base.Setstring(ColumnNames.MetodoDePago, value);
			}
		}

		public virtual string NumCtaPago
	    {
			get
	        {
				return base.Getstring(ColumnNames.NumCtaPago);
			}
			set
	        {
				base.Setstring(ColumnNames.NumCtaPago, value);
			}
		}

		public virtual string USERDEF1
	    {
			get
	        {
				return base.Getstring(ColumnNames.USERDEF1);
			}
			set
	        {
				base.Setstring(ColumnNames.USERDEF1, value);
			}
		}

		public virtual string FolioFiscal
	    {
			get
	        {
				return base.Getstring(ColumnNames.FolioFiscal);
			}
			set
	        {
				base.Setstring(ColumnNames.FolioFiscal, value);
			}
		}

		public virtual string NoCertificadoCSD
	    {
			get
	        {
				return base.Getstring(ColumnNames.NoCertificadoCSD);
			}
			set
	        {
				base.Setstring(ColumnNames.NoCertificadoCSD, value);
			}
		}

		public virtual string Version
	    {
			get
	        {
				return base.Getstring(ColumnNames.Version);
			}
			set
	        {
				base.Setstring(ColumnNames.Version, value);
			}
		}

		public virtual string SelloCFD
	    {
			get
	        {
				return base.Getstring(ColumnNames.SelloCFD);
			}
			set
	        {
				base.Setstring(ColumnNames.SelloCFD, value);
			}
		}

		public virtual string SelloSAT
	    {
			get
	        {
				return base.Getstring(ColumnNames.SelloSAT);
			}
			set
	        {
				base.Setstring(ColumnNames.SelloSAT, value);
			}
		}

		public virtual string CadenaOriginalSAT
	    {
			get
	        {
				return base.Getstring(ColumnNames.CadenaOriginalSAT);
			}
			set
	        {
				base.Setstring(ColumnNames.CadenaOriginalSAT, value);
			}
		}

		public virtual string NoCertificadoSAT
	    {
			get
	        {
				return base.Getstring(ColumnNames.NoCertificadoSAT);
			}
			set
	        {
				base.Setstring(ColumnNames.NoCertificadoSAT, value);
			}
		}

		public virtual string FechaTimbrado
	    {
			get
	        {
				return base.Getstring(ColumnNames.FechaTimbrado);
			}
			set
	        {
				base.Setstring(ColumnNames.FechaTimbrado, value);
			}
		}

		public virtual string RutaYNomArchivo
	    {
			get
	        {
				return base.Getstring(ColumnNames.RutaYNomArchivo);
			}
			set
	        {
				base.Setstring(ColumnNames.RutaYNomArchivo, value);
			}
		}

		public virtual string RutaYNomArchivoNet
	    {
			get
	        {
				return base.Getstring(ColumnNames.RutaYNomArchivoNet);
			}
			set
	        {
				base.Setstring(ColumnNames.RutaYNomArchivoNet, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Soptype
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Soptype) ? string.Empty : base.GetshortAsString(ColumnNames.Soptype);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Soptype);
				else
					this.Soptype = base.SetshortAsString(ColumnNames.Soptype, value);
			}
		}

		public virtual string s_Docid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Docid) ? string.Empty : base.GetstringAsString(ColumnNames.Docid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Docid);
				else
					this.Docid = base.SetstringAsString(ColumnNames.Docid, value);
			}
		}

		public virtual string s_Sopnumbe
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Sopnumbe) ? string.Empty : base.GetstringAsString(ColumnNames.Sopnumbe);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Sopnumbe);
				else
					this.Sopnumbe = base.SetstringAsString(ColumnNames.Sopnumbe, value);
			}
		}

		public virtual string s_FechaHoraEmision
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FechaHoraEmision) ? string.Empty : base.GetDateTimeAsString(ColumnNames.FechaHoraEmision);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FechaHoraEmision);
				else
					this.FechaHoraEmision = base.SetDateTimeAsString(ColumnNames.FechaHoraEmision, value);
			}
		}

		public virtual string s_RfcReceptor
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RfcReceptor) ? string.Empty : base.GetstringAsString(ColumnNames.RfcReceptor);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RfcReceptor);
				else
					this.RfcReceptor = base.SetstringAsString(ColumnNames.RfcReceptor, value);
			}
		}

		public virtual string s_NombreCliente
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NombreCliente) ? string.Empty : base.GetstringAsString(ColumnNames.NombreCliente);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NombreCliente);
				else
					this.NombreCliente = base.SetstringAsString(ColumnNames.NombreCliente, value);
			}
		}

		public virtual string s_Total
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Total) ? string.Empty : base.GetdecimalAsString(ColumnNames.Total);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Total);
				else
					this.Total = base.SetdecimalAsString(ColumnNames.Total, value);
			}
		}

		public virtual string s_FormaDePago
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FormaDePago) ? string.Empty : base.GetstringAsString(ColumnNames.FormaDePago);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FormaDePago);
				else
					this.FormaDePago = base.SetstringAsString(ColumnNames.FormaDePago, value);
			}
		}

		public virtual string s_MetodoDePago
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MetodoDePago) ? string.Empty : base.GetstringAsString(ColumnNames.MetodoDePago);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MetodoDePago);
				else
					this.MetodoDePago = base.SetstringAsString(ColumnNames.MetodoDePago, value);
			}
		}

		public virtual string s_NumCtaPago
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NumCtaPago) ? string.Empty : base.GetstringAsString(ColumnNames.NumCtaPago);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NumCtaPago);
				else
					this.NumCtaPago = base.SetstringAsString(ColumnNames.NumCtaPago, value);
			}
		}

		public virtual string s_USERDEF1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.USERDEF1) ? string.Empty : base.GetstringAsString(ColumnNames.USERDEF1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.USERDEF1);
				else
					this.USERDEF1 = base.SetstringAsString(ColumnNames.USERDEF1, value);
			}
		}

		public virtual string s_FolioFiscal
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FolioFiscal) ? string.Empty : base.GetstringAsString(ColumnNames.FolioFiscal);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FolioFiscal);
				else
					this.FolioFiscal = base.SetstringAsString(ColumnNames.FolioFiscal, value);
			}
		}

		public virtual string s_NoCertificadoCSD
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NoCertificadoCSD) ? string.Empty : base.GetstringAsString(ColumnNames.NoCertificadoCSD);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NoCertificadoCSD);
				else
					this.NoCertificadoCSD = base.SetstringAsString(ColumnNames.NoCertificadoCSD, value);
			}
		}

		public virtual string s_Version
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Version) ? string.Empty : base.GetstringAsString(ColumnNames.Version);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Version);
				else
					this.Version = base.SetstringAsString(ColumnNames.Version, value);
			}
		}

		public virtual string s_SelloCFD
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SelloCFD) ? string.Empty : base.GetstringAsString(ColumnNames.SelloCFD);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SelloCFD);
				else
					this.SelloCFD = base.SetstringAsString(ColumnNames.SelloCFD, value);
			}
		}

		public virtual string s_SelloSAT
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.SelloSAT) ? string.Empty : base.GetstringAsString(ColumnNames.SelloSAT);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.SelloSAT);
				else
					this.SelloSAT = base.SetstringAsString(ColumnNames.SelloSAT, value);
			}
		}

		public virtual string s_CadenaOriginalSAT
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CadenaOriginalSAT) ? string.Empty : base.GetstringAsString(ColumnNames.CadenaOriginalSAT);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CadenaOriginalSAT);
				else
					this.CadenaOriginalSAT = base.SetstringAsString(ColumnNames.CadenaOriginalSAT, value);
			}
		}

		public virtual string s_NoCertificadoSAT
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NoCertificadoSAT) ? string.Empty : base.GetstringAsString(ColumnNames.NoCertificadoSAT);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NoCertificadoSAT);
				else
					this.NoCertificadoSAT = base.SetstringAsString(ColumnNames.NoCertificadoSAT, value);
			}
		}

		public virtual string s_FechaTimbrado
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FechaTimbrado) ? string.Empty : base.GetstringAsString(ColumnNames.FechaTimbrado);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FechaTimbrado);
				else
					this.FechaTimbrado = base.SetstringAsString(ColumnNames.FechaTimbrado, value);
			}
		}

		public virtual string s_RutaYNomArchivo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RutaYNomArchivo) ? string.Empty : base.GetstringAsString(ColumnNames.RutaYNomArchivo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RutaYNomArchivo);
				else
					this.RutaYNomArchivo = base.SetstringAsString(ColumnNames.RutaYNomArchivo, value);
			}
		}

		public virtual string s_RutaYNomArchivoNet
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RutaYNomArchivoNet) ? string.Empty : base.GetstringAsString(ColumnNames.RutaYNomArchivoNet);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RutaYNomArchivoNet);
				else
					this.RutaYNomArchivoNet = base.SetstringAsString(ColumnNames.RutaYNomArchivoNet, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Soptype
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Soptype, Parameters.Soptype);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Docid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Docid, Parameters.Docid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Sopnumbe
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Sopnumbe, Parameters.Sopnumbe);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FechaHoraEmision
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FechaHoraEmision, Parameters.FechaHoraEmision);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RfcReceptor
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RfcReceptor, Parameters.RfcReceptor);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NombreCliente
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NombreCliente, Parameters.NombreCliente);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Total
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Total, Parameters.Total);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FormaDePago
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FormaDePago, Parameters.FormaDePago);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MetodoDePago
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MetodoDePago, Parameters.MetodoDePago);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NumCtaPago
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NumCtaPago, Parameters.NumCtaPago);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter USERDEF1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.USERDEF1, Parameters.USERDEF1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FolioFiscal
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FolioFiscal, Parameters.FolioFiscal);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NoCertificadoCSD
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NoCertificadoCSD, Parameters.NoCertificadoCSD);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Version
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Version, Parameters.Version);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SelloCFD
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SelloCFD, Parameters.SelloCFD);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter SelloSAT
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.SelloSAT, Parameters.SelloSAT);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CadenaOriginalSAT
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CadenaOriginalSAT, Parameters.CadenaOriginalSAT);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NoCertificadoSAT
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NoCertificadoSAT, Parameters.NoCertificadoSAT);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FechaTimbrado
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FechaTimbrado, Parameters.FechaTimbrado);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RutaYNomArchivo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RutaYNomArchivo, Parameters.RutaYNomArchivo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RutaYNomArchivoNet
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RutaYNomArchivoNet, Parameters.RutaYNomArchivoNet);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Soptype
		    {
				get
		        {
					if(_Soptype_W == null)
	        	    {
						_Soptype_W = TearOff.Soptype;
					}
					return _Soptype_W;
				}
			}

			public WhereParameter Docid
		    {
				get
		        {
					if(_Docid_W == null)
	        	    {
						_Docid_W = TearOff.Docid;
					}
					return _Docid_W;
				}
			}

			public WhereParameter Sopnumbe
		    {
				get
		        {
					if(_Sopnumbe_W == null)
	        	    {
						_Sopnumbe_W = TearOff.Sopnumbe;
					}
					return _Sopnumbe_W;
				}
			}

			public WhereParameter FechaHoraEmision
		    {
				get
		        {
					if(_FechaHoraEmision_W == null)
	        	    {
						_FechaHoraEmision_W = TearOff.FechaHoraEmision;
					}
					return _FechaHoraEmision_W;
				}
			}

			public WhereParameter RfcReceptor
		    {
				get
		        {
					if(_RfcReceptor_W == null)
	        	    {
						_RfcReceptor_W = TearOff.RfcReceptor;
					}
					return _RfcReceptor_W;
				}
			}

			public WhereParameter NombreCliente
		    {
				get
		        {
					if(_NombreCliente_W == null)
	        	    {
						_NombreCliente_W = TearOff.NombreCliente;
					}
					return _NombreCliente_W;
				}
			}

			public WhereParameter Total
		    {
				get
		        {
					if(_Total_W == null)
	        	    {
						_Total_W = TearOff.Total;
					}
					return _Total_W;
				}
			}

			public WhereParameter FormaDePago
		    {
				get
		        {
					if(_FormaDePago_W == null)
	        	    {
						_FormaDePago_W = TearOff.FormaDePago;
					}
					return _FormaDePago_W;
				}
			}

			public WhereParameter MetodoDePago
		    {
				get
		        {
					if(_MetodoDePago_W == null)
	        	    {
						_MetodoDePago_W = TearOff.MetodoDePago;
					}
					return _MetodoDePago_W;
				}
			}

			public WhereParameter NumCtaPago
		    {
				get
		        {
					if(_NumCtaPago_W == null)
	        	    {
						_NumCtaPago_W = TearOff.NumCtaPago;
					}
					return _NumCtaPago_W;
				}
			}

			public WhereParameter USERDEF1
		    {
				get
		        {
					if(_USERDEF1_W == null)
	        	    {
						_USERDEF1_W = TearOff.USERDEF1;
					}
					return _USERDEF1_W;
				}
			}

			public WhereParameter FolioFiscal
		    {
				get
		        {
					if(_FolioFiscal_W == null)
	        	    {
						_FolioFiscal_W = TearOff.FolioFiscal;
					}
					return _FolioFiscal_W;
				}
			}

			public WhereParameter NoCertificadoCSD
		    {
				get
		        {
					if(_NoCertificadoCSD_W == null)
	        	    {
						_NoCertificadoCSD_W = TearOff.NoCertificadoCSD;
					}
					return _NoCertificadoCSD_W;
				}
			}

			public WhereParameter Version
		    {
				get
		        {
					if(_Version_W == null)
	        	    {
						_Version_W = TearOff.Version;
					}
					return _Version_W;
				}
			}

			public WhereParameter SelloCFD
		    {
				get
		        {
					if(_SelloCFD_W == null)
	        	    {
						_SelloCFD_W = TearOff.SelloCFD;
					}
					return _SelloCFD_W;
				}
			}

			public WhereParameter SelloSAT
		    {
				get
		        {
					if(_SelloSAT_W == null)
	        	    {
						_SelloSAT_W = TearOff.SelloSAT;
					}
					return _SelloSAT_W;
				}
			}

			public WhereParameter CadenaOriginalSAT
		    {
				get
		        {
					if(_CadenaOriginalSAT_W == null)
	        	    {
						_CadenaOriginalSAT_W = TearOff.CadenaOriginalSAT;
					}
					return _CadenaOriginalSAT_W;
				}
			}

			public WhereParameter NoCertificadoSAT
		    {
				get
		        {
					if(_NoCertificadoSAT_W == null)
	        	    {
						_NoCertificadoSAT_W = TearOff.NoCertificadoSAT;
					}
					return _NoCertificadoSAT_W;
				}
			}

			public WhereParameter FechaTimbrado
		    {
				get
		        {
					if(_FechaTimbrado_W == null)
	        	    {
						_FechaTimbrado_W = TearOff.FechaTimbrado;
					}
					return _FechaTimbrado_W;
				}
			}

			public WhereParameter RutaYNomArchivo
		    {
				get
		        {
					if(_RutaYNomArchivo_W == null)
	        	    {
						_RutaYNomArchivo_W = TearOff.RutaYNomArchivo;
					}
					return _RutaYNomArchivo_W;
				}
			}

			public WhereParameter RutaYNomArchivoNet
		    {
				get
		        {
					if(_RutaYNomArchivoNet_W == null)
	        	    {
						_RutaYNomArchivoNet_W = TearOff.RutaYNomArchivoNet;
					}
					return _RutaYNomArchivoNet_W;
				}
			}

			private WhereParameter _Soptype_W = null;
			private WhereParameter _Docid_W = null;
			private WhereParameter _Sopnumbe_W = null;
			private WhereParameter _FechaHoraEmision_W = null;
			private WhereParameter _RfcReceptor_W = null;
			private WhereParameter _NombreCliente_W = null;
			private WhereParameter _Total_W = null;
			private WhereParameter _FormaDePago_W = null;
			private WhereParameter _MetodoDePago_W = null;
			private WhereParameter _NumCtaPago_W = null;
			private WhereParameter _USERDEF1_W = null;
			private WhereParameter _FolioFiscal_W = null;
			private WhereParameter _NoCertificadoCSD_W = null;
			private WhereParameter _Version_W = null;
			private WhereParameter _SelloCFD_W = null;
			private WhereParameter _SelloSAT_W = null;
			private WhereParameter _CadenaOriginalSAT_W = null;
			private WhereParameter _NoCertificadoSAT_W = null;
			private WhereParameter _FechaTimbrado_W = null;
			private WhereParameter _RutaYNomArchivo_W = null;
			private WhereParameter _RutaYNomArchivoNet_W = null;

			public void WhereClauseReset()
			{
				_Soptype_W = null;
				_Docid_W = null;
				_Sopnumbe_W = null;
				_FechaHoraEmision_W = null;
				_RfcReceptor_W = null;
				_NombreCliente_W = null;
				_Total_W = null;
				_FormaDePago_W = null;
				_MetodoDePago_W = null;
				_NumCtaPago_W = null;
				_USERDEF1_W = null;
				_FolioFiscal_W = null;
				_NoCertificadoCSD_W = null;
				_Version_W = null;
				_SelloCFD_W = null;
				_SelloSAT_W = null;
				_CadenaOriginalSAT_W = null;
				_NoCertificadoSAT_W = null;
				_FechaTimbrado_W = null;
				_RutaYNomArchivo_W = null;
				_RutaYNomArchivoNet_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Soptype
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Soptype, Parameters.Soptype);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Docid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Docid, Parameters.Docid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Sopnumbe
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Sopnumbe, Parameters.Sopnumbe);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FechaHoraEmision
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FechaHoraEmision, Parameters.FechaHoraEmision);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RfcReceptor
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RfcReceptor, Parameters.RfcReceptor);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NombreCliente
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NombreCliente, Parameters.NombreCliente);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Total
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Total, Parameters.Total);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FormaDePago
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FormaDePago, Parameters.FormaDePago);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MetodoDePago
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MetodoDePago, Parameters.MetodoDePago);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NumCtaPago
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NumCtaPago, Parameters.NumCtaPago);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter USERDEF1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.USERDEF1, Parameters.USERDEF1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FolioFiscal
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FolioFiscal, Parameters.FolioFiscal);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NoCertificadoCSD
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NoCertificadoCSD, Parameters.NoCertificadoCSD);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Version
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Version, Parameters.Version);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SelloCFD
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SelloCFD, Parameters.SelloCFD);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter SelloSAT
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.SelloSAT, Parameters.SelloSAT);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CadenaOriginalSAT
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CadenaOriginalSAT, Parameters.CadenaOriginalSAT);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NoCertificadoSAT
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NoCertificadoSAT, Parameters.NoCertificadoSAT);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FechaTimbrado
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FechaTimbrado, Parameters.FechaTimbrado);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RutaYNomArchivo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RutaYNomArchivo, Parameters.RutaYNomArchivo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RutaYNomArchivoNet
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RutaYNomArchivoNet, Parameters.RutaYNomArchivoNet);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Soptype
		    {
				get
		        {
					if(_Soptype_W == null)
	        	    {
						_Soptype_W = TearOff.Soptype;
					}
					return _Soptype_W;
				}
			}

			public AggregateParameter Docid
		    {
				get
		        {
					if(_Docid_W == null)
	        	    {
						_Docid_W = TearOff.Docid;
					}
					return _Docid_W;
				}
			}

			public AggregateParameter Sopnumbe
		    {
				get
		        {
					if(_Sopnumbe_W == null)
	        	    {
						_Sopnumbe_W = TearOff.Sopnumbe;
					}
					return _Sopnumbe_W;
				}
			}

			public AggregateParameter FechaHoraEmision
		    {
				get
		        {
					if(_FechaHoraEmision_W == null)
	        	    {
						_FechaHoraEmision_W = TearOff.FechaHoraEmision;
					}
					return _FechaHoraEmision_W;
				}
			}

			public AggregateParameter RfcReceptor
		    {
				get
		        {
					if(_RfcReceptor_W == null)
	        	    {
						_RfcReceptor_W = TearOff.RfcReceptor;
					}
					return _RfcReceptor_W;
				}
			}

			public AggregateParameter NombreCliente
		    {
				get
		        {
					if(_NombreCliente_W == null)
	        	    {
						_NombreCliente_W = TearOff.NombreCliente;
					}
					return _NombreCliente_W;
				}
			}

			public AggregateParameter Total
		    {
				get
		        {
					if(_Total_W == null)
	        	    {
						_Total_W = TearOff.Total;
					}
					return _Total_W;
				}
			}

			public AggregateParameter FormaDePago
		    {
				get
		        {
					if(_FormaDePago_W == null)
	        	    {
						_FormaDePago_W = TearOff.FormaDePago;
					}
					return _FormaDePago_W;
				}
			}

			public AggregateParameter MetodoDePago
		    {
				get
		        {
					if(_MetodoDePago_W == null)
	        	    {
						_MetodoDePago_W = TearOff.MetodoDePago;
					}
					return _MetodoDePago_W;
				}
			}

			public AggregateParameter NumCtaPago
		    {
				get
		        {
					if(_NumCtaPago_W == null)
	        	    {
						_NumCtaPago_W = TearOff.NumCtaPago;
					}
					return _NumCtaPago_W;
				}
			}

			public AggregateParameter USERDEF1
		    {
				get
		        {
					if(_USERDEF1_W == null)
	        	    {
						_USERDEF1_W = TearOff.USERDEF1;
					}
					return _USERDEF1_W;
				}
			}

			public AggregateParameter FolioFiscal
		    {
				get
		        {
					if(_FolioFiscal_W == null)
	        	    {
						_FolioFiscal_W = TearOff.FolioFiscal;
					}
					return _FolioFiscal_W;
				}
			}

			public AggregateParameter NoCertificadoCSD
		    {
				get
		        {
					if(_NoCertificadoCSD_W == null)
	        	    {
						_NoCertificadoCSD_W = TearOff.NoCertificadoCSD;
					}
					return _NoCertificadoCSD_W;
				}
			}

			public AggregateParameter Version
		    {
				get
		        {
					if(_Version_W == null)
	        	    {
						_Version_W = TearOff.Version;
					}
					return _Version_W;
				}
			}

			public AggregateParameter SelloCFD
		    {
				get
		        {
					if(_SelloCFD_W == null)
	        	    {
						_SelloCFD_W = TearOff.SelloCFD;
					}
					return _SelloCFD_W;
				}
			}

			public AggregateParameter SelloSAT
		    {
				get
		        {
					if(_SelloSAT_W == null)
	        	    {
						_SelloSAT_W = TearOff.SelloSAT;
					}
					return _SelloSAT_W;
				}
			}

			public AggregateParameter CadenaOriginalSAT
		    {
				get
		        {
					if(_CadenaOriginalSAT_W == null)
	        	    {
						_CadenaOriginalSAT_W = TearOff.CadenaOriginalSAT;
					}
					return _CadenaOriginalSAT_W;
				}
			}

			public AggregateParameter NoCertificadoSAT
		    {
				get
		        {
					if(_NoCertificadoSAT_W == null)
	        	    {
						_NoCertificadoSAT_W = TearOff.NoCertificadoSAT;
					}
					return _NoCertificadoSAT_W;
				}
			}

			public AggregateParameter FechaTimbrado
		    {
				get
		        {
					if(_FechaTimbrado_W == null)
	        	    {
						_FechaTimbrado_W = TearOff.FechaTimbrado;
					}
					return _FechaTimbrado_W;
				}
			}

			public AggregateParameter RutaYNomArchivo
		    {
				get
		        {
					if(_RutaYNomArchivo_W == null)
	        	    {
						_RutaYNomArchivo_W = TearOff.RutaYNomArchivo;
					}
					return _RutaYNomArchivo_W;
				}
			}

			public AggregateParameter RutaYNomArchivoNet
		    {
				get
		        {
					if(_RutaYNomArchivoNet_W == null)
	        	    {
						_RutaYNomArchivoNet_W = TearOff.RutaYNomArchivoNet;
					}
					return _RutaYNomArchivoNet_W;
				}
			}

			private AggregateParameter _Soptype_W = null;
			private AggregateParameter _Docid_W = null;
			private AggregateParameter _Sopnumbe_W = null;
			private AggregateParameter _FechaHoraEmision_W = null;
			private AggregateParameter _RfcReceptor_W = null;
			private AggregateParameter _NombreCliente_W = null;
			private AggregateParameter _Total_W = null;
			private AggregateParameter _FormaDePago_W = null;
			private AggregateParameter _MetodoDePago_W = null;
			private AggregateParameter _NumCtaPago_W = null;
			private AggregateParameter _USERDEF1_W = null;
			private AggregateParameter _FolioFiscal_W = null;
			private AggregateParameter _NoCertificadoCSD_W = null;
			private AggregateParameter _Version_W = null;
			private AggregateParameter _SelloCFD_W = null;
			private AggregateParameter _SelloSAT_W = null;
			private AggregateParameter _CadenaOriginalSAT_W = null;
			private AggregateParameter _NoCertificadoSAT_W = null;
			private AggregateParameter _FechaTimbrado_W = null;
			private AggregateParameter _RutaYNomArchivo_W = null;
			private AggregateParameter _RutaYNomArchivoNet_W = null;

			public void AggregateClauseReset()
			{
				_Soptype_W = null;
				_Docid_W = null;
				_Sopnumbe_W = null;
				_FechaHoraEmision_W = null;
				_RfcReceptor_W = null;
				_NombreCliente_W = null;
				_Total_W = null;
				_FormaDePago_W = null;
				_MetodoDePago_W = null;
				_NumCtaPago_W = null;
				_USERDEF1_W = null;
				_FolioFiscal_W = null;
				_NoCertificadoCSD_W = null;
				_Version_W = null;
				_SelloCFD_W = null;
				_SelloSAT_W = null;
				_CadenaOriginalSAT_W = null;
				_NoCertificadoSAT_W = null;
				_FechaTimbrado_W = null;
				_RutaYNomArchivo_W = null;
				_RutaYNomArchivoNet_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
