
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace cfd.FacturaElectronica
{
	public abstract class _cfdLogLibroCV : SqlClientEntity
	{
		public _cfdLogLibroCV()
		{
			this.QuerySource = "cfdLogLibroCV";
			this.MappingName = "cfdLogLibroCV";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_cfdLogLibroCVLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(int Periodo, string Tipo, string Estado)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.Periodo, Periodo);

parameters.Add(Parameters.Tipo, Tipo);

parameters.Add(Parameters.Estado, Estado);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_cfdLogLibroCVLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Secuencia
			{
				get
				{
					return new SqlParameter("@Secuencia", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Periodo
			{
				get
				{
					return new SqlParameter("@Periodo", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Tipo
			{
				get
				{
					return new SqlParameter("@Tipo", SqlDbType.VarChar, 3);
				}
			}
			
			public static SqlParameter Estado
			{
				get
				{
					return new SqlParameter("@Estado", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter MensajeGral
			{
				get
				{
					return new SqlParameter("@MensajeGral", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter EstadoActualBin
			{
				get
				{
					return new SqlParameter("@EstadoActualBin", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter IdxSingleStatus
			{
				get
				{
					return new SqlParameter("@IdxSingleStatus", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter MensajeEActual
			{
				get
				{
					return new SqlParameter("@MensajeEActual", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter ArchivoXML
			{
				get
				{
					return new SqlParameter("@ArchivoXML", SqlDbType.Xml, 1073741823);
				}
			}
			
			public static SqlParameter FechaAlta
			{
				get
				{
					return new SqlParameter("@FechaAlta", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IdUsuario
			{
				get
				{
					return new SqlParameter("@IdUsuario", SqlDbType.VarChar, 10);
				}
			}
			
			public static SqlParameter FechaModificacion
			{
				get
				{
					return new SqlParameter("@FechaModificacion", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IdUsuarioModificacion
			{
				get
				{
					return new SqlParameter("@IdUsuarioModificacion", SqlDbType.VarChar, 10);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Secuencia = "secuencia";
            public const string Periodo = "periodo";
            public const string Tipo = "tipo";
            public const string Estado = "estado";
            public const string MensajeGral = "mensajeGral";
            public const string EstadoActualBin = "estadoActualBin";
            public const string IdxSingleStatus = "idxSingleStatus";
            public const string MensajeEActual = "mensajeEActual";
            public const string ArchivoXML = "archivoXML";
            public const string FechaAlta = "fechaAlta";
            public const string IdUsuario = "idUsuario";
            public const string FechaModificacion = "fechaModificacion";
            public const string IdUsuarioModificacion = "idUsuarioModificacion";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Secuencia] = _cfdLogLibroCV.PropertyNames.Secuencia;
					ht[Periodo] = _cfdLogLibroCV.PropertyNames.Periodo;
					ht[Tipo] = _cfdLogLibroCV.PropertyNames.Tipo;
					ht[Estado] = _cfdLogLibroCV.PropertyNames.Estado;
					ht[MensajeGral] = _cfdLogLibroCV.PropertyNames.MensajeGral;
					ht[EstadoActualBin] = _cfdLogLibroCV.PropertyNames.EstadoActualBin;
					ht[IdxSingleStatus] = _cfdLogLibroCV.PropertyNames.IdxSingleStatus;
					ht[MensajeEActual] = _cfdLogLibroCV.PropertyNames.MensajeEActual;
					ht[ArchivoXML] = _cfdLogLibroCV.PropertyNames.ArchivoXML;
					ht[FechaAlta] = _cfdLogLibroCV.PropertyNames.FechaAlta;
					ht[IdUsuario] = _cfdLogLibroCV.PropertyNames.IdUsuario;
					ht[FechaModificacion] = _cfdLogLibroCV.PropertyNames.FechaModificacion;
					ht[IdUsuarioModificacion] = _cfdLogLibroCV.PropertyNames.IdUsuarioModificacion;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Secuencia = "Secuencia";
            public const string Periodo = "Periodo";
            public const string Tipo = "Tipo";
            public const string Estado = "Estado";
            public const string MensajeGral = "MensajeGral";
            public const string EstadoActualBin = "EstadoActualBin";
            public const string IdxSingleStatus = "IdxSingleStatus";
            public const string MensajeEActual = "MensajeEActual";
            public const string ArchivoXML = "ArchivoXML";
            public const string FechaAlta = "FechaAlta";
            public const string IdUsuario = "IdUsuario";
            public const string FechaModificacion = "FechaModificacion";
            public const string IdUsuarioModificacion = "IdUsuarioModificacion";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Secuencia] = _cfdLogLibroCV.ColumnNames.Secuencia;
					ht[Periodo] = _cfdLogLibroCV.ColumnNames.Periodo;
					ht[Tipo] = _cfdLogLibroCV.ColumnNames.Tipo;
					ht[Estado] = _cfdLogLibroCV.ColumnNames.Estado;
					ht[MensajeGral] = _cfdLogLibroCV.ColumnNames.MensajeGral;
					ht[EstadoActualBin] = _cfdLogLibroCV.ColumnNames.EstadoActualBin;
					ht[IdxSingleStatus] = _cfdLogLibroCV.ColumnNames.IdxSingleStatus;
					ht[MensajeEActual] = _cfdLogLibroCV.ColumnNames.MensajeEActual;
					ht[ArchivoXML] = _cfdLogLibroCV.ColumnNames.ArchivoXML;
					ht[FechaAlta] = _cfdLogLibroCV.ColumnNames.FechaAlta;
					ht[IdUsuario] = _cfdLogLibroCV.ColumnNames.IdUsuario;
					ht[FechaModificacion] = _cfdLogLibroCV.ColumnNames.FechaModificacion;
					ht[IdUsuarioModificacion] = _cfdLogLibroCV.ColumnNames.IdUsuarioModificacion;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Secuencia = "s_Secuencia";
            public const string Periodo = "s_Periodo";
            public const string Tipo = "s_Tipo";
            public const string Estado = "s_Estado";
            public const string MensajeGral = "s_MensajeGral";
            public const string EstadoActualBin = "s_EstadoActualBin";
            public const string IdxSingleStatus = "s_IdxSingleStatus";
            public const string MensajeEActual = "s_MensajeEActual";
            public const string ArchivoXML = "s_ArchivoXML";
            public const string FechaAlta = "s_FechaAlta";
            public const string IdUsuario = "s_IdUsuario";
            public const string FechaModificacion = "s_FechaModificacion";
            public const string IdUsuarioModificacion = "s_IdUsuarioModificacion";

		}
		#endregion		
		
		#region Properties
	
		public virtual int Secuencia
	    {
			get
	        {
				return base.Getint(ColumnNames.Secuencia);
			}
			set
	        {
				base.Setint(ColumnNames.Secuencia, value);
			}
		}

		public virtual int Periodo
	    {
			get
	        {
				return base.Getint(ColumnNames.Periodo);
			}
			set
	        {
				base.Setint(ColumnNames.Periodo, value);
			}
		}

		public virtual string Tipo
	    {
			get
	        {
				return base.Getstring(ColumnNames.Tipo);
			}
			set
	        {
				base.Setstring(ColumnNames.Tipo, value);
			}
		}

		public virtual string Estado
	    {
			get
	        {
				return base.Getstring(ColumnNames.Estado);
			}
			set
	        {
				base.Setstring(ColumnNames.Estado, value);
			}
		}

		public virtual string MensajeGral
	    {
			get
	        {
				return base.Getstring(ColumnNames.MensajeGral);
			}
			set
	        {
				base.Setstring(ColumnNames.MensajeGral, value);
			}
		}

		public virtual string EstadoActualBin
	    {
			get
	        {
				return base.Getstring(ColumnNames.EstadoActualBin);
			}
			set
	        {
				base.Setstring(ColumnNames.EstadoActualBin, value);
			}
		}

		public virtual short IdxSingleStatus
	    {
			get
	        {
				return base.Getshort(ColumnNames.IdxSingleStatus);
			}
			set
	        {
				base.Setshort(ColumnNames.IdxSingleStatus, value);
			}
		}

		public virtual string MensajeEActual
	    {
			get
	        {
				return base.Getstring(ColumnNames.MensajeEActual);
			}
			set
	        {
				base.Setstring(ColumnNames.MensajeEActual, value);
			}
		}

		public virtual string ArchivoXML
	    {
			get
	        {
				return base.Getstring(ColumnNames.ArchivoXML);
			}
			set
	        {
				base.Setstring(ColumnNames.ArchivoXML, value);
			}
		}

		public virtual DateTime FechaAlta
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.FechaAlta);
			}
			set
	        {
				base.SetDateTime(ColumnNames.FechaAlta, value);
			}
		}

		public virtual string IdUsuario
	    {
			get
	        {
				return base.Getstring(ColumnNames.IdUsuario);
			}
			set
	        {
				base.Setstring(ColumnNames.IdUsuario, value);
			}
		}

		public virtual DateTime FechaModificacion
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.FechaModificacion);
			}
			set
	        {
				base.SetDateTime(ColumnNames.FechaModificacion, value);
			}
		}

		public virtual string IdUsuarioModificacion
	    {
			get
	        {
				return base.Getstring(ColumnNames.IdUsuarioModificacion);
			}
			set
	        {
				base.Setstring(ColumnNames.IdUsuarioModificacion, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Secuencia
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Secuencia) ? string.Empty : base.GetintAsString(ColumnNames.Secuencia);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Secuencia);
				else
					this.Secuencia = base.SetintAsString(ColumnNames.Secuencia, value);
			}
		}

		public virtual string s_Periodo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Periodo) ? string.Empty : base.GetintAsString(ColumnNames.Periodo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Periodo);
				else
					this.Periodo = base.SetintAsString(ColumnNames.Periodo, value);
			}
		}

		public virtual string s_Tipo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Tipo) ? string.Empty : base.GetstringAsString(ColumnNames.Tipo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Tipo);
				else
					this.Tipo = base.SetstringAsString(ColumnNames.Tipo, value);
			}
		}

		public virtual string s_Estado
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Estado) ? string.Empty : base.GetstringAsString(ColumnNames.Estado);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Estado);
				else
					this.Estado = base.SetstringAsString(ColumnNames.Estado, value);
			}
		}

		public virtual string s_MensajeGral
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MensajeGral) ? string.Empty : base.GetstringAsString(ColumnNames.MensajeGral);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MensajeGral);
				else
					this.MensajeGral = base.SetstringAsString(ColumnNames.MensajeGral, value);
			}
		}

		public virtual string s_EstadoActualBin
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EstadoActualBin) ? string.Empty : base.GetstringAsString(ColumnNames.EstadoActualBin);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EstadoActualBin);
				else
					this.EstadoActualBin = base.SetstringAsString(ColumnNames.EstadoActualBin, value);
			}
		}

		public virtual string s_IdxSingleStatus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IdxSingleStatus) ? string.Empty : base.GetshortAsString(ColumnNames.IdxSingleStatus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IdxSingleStatus);
				else
					this.IdxSingleStatus = base.SetshortAsString(ColumnNames.IdxSingleStatus, value);
			}
		}

		public virtual string s_MensajeEActual
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MensajeEActual) ? string.Empty : base.GetstringAsString(ColumnNames.MensajeEActual);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MensajeEActual);
				else
					this.MensajeEActual = base.SetstringAsString(ColumnNames.MensajeEActual, value);
			}
		}

		public virtual string s_ArchivoXML
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ArchivoXML) ? string.Empty : base.GetstringAsString(ColumnNames.ArchivoXML);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ArchivoXML);
				else
					this.ArchivoXML = base.SetstringAsString(ColumnNames.ArchivoXML, value);
			}
		}

		public virtual string s_FechaAlta
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FechaAlta) ? string.Empty : base.GetDateTimeAsString(ColumnNames.FechaAlta);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FechaAlta);
				else
					this.FechaAlta = base.SetDateTimeAsString(ColumnNames.FechaAlta, value);
			}
		}

		public virtual string s_IdUsuario
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IdUsuario) ? string.Empty : base.GetstringAsString(ColumnNames.IdUsuario);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IdUsuario);
				else
					this.IdUsuario = base.SetstringAsString(ColumnNames.IdUsuario, value);
			}
		}

		public virtual string s_FechaModificacion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FechaModificacion) ? string.Empty : base.GetDateTimeAsString(ColumnNames.FechaModificacion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FechaModificacion);
				else
					this.FechaModificacion = base.SetDateTimeAsString(ColumnNames.FechaModificacion, value);
			}
		}

		public virtual string s_IdUsuarioModificacion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IdUsuarioModificacion) ? string.Empty : base.GetstringAsString(ColumnNames.IdUsuarioModificacion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IdUsuarioModificacion);
				else
					this.IdUsuarioModificacion = base.SetstringAsString(ColumnNames.IdUsuarioModificacion, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Secuencia
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Secuencia, Parameters.Secuencia);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Periodo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Periodo, Parameters.Periodo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Tipo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Tipo, Parameters.Tipo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Estado
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Estado, Parameters.Estado);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MensajeGral
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MensajeGral, Parameters.MensajeGral);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EstadoActualBin
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EstadoActualBin, Parameters.EstadoActualBin);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IdxSingleStatus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IdxSingleStatus, Parameters.IdxSingleStatus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MensajeEActual
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MensajeEActual, Parameters.MensajeEActual);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ArchivoXML
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ArchivoXML, Parameters.ArchivoXML);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FechaAlta
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FechaAlta, Parameters.FechaAlta);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IdUsuario
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IdUsuario, Parameters.IdUsuario);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FechaModificacion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FechaModificacion, Parameters.FechaModificacion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IdUsuarioModificacion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IdUsuarioModificacion, Parameters.IdUsuarioModificacion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Secuencia
		    {
				get
		        {
					if(_Secuencia_W == null)
	        	    {
						_Secuencia_W = TearOff.Secuencia;
					}
					return _Secuencia_W;
				}
			}

			public WhereParameter Periodo
		    {
				get
		        {
					if(_Periodo_W == null)
	        	    {
						_Periodo_W = TearOff.Periodo;
					}
					return _Periodo_W;
				}
			}

			public WhereParameter Tipo
		    {
				get
		        {
					if(_Tipo_W == null)
	        	    {
						_Tipo_W = TearOff.Tipo;
					}
					return _Tipo_W;
				}
			}

			public WhereParameter Estado
		    {
				get
		        {
					if(_Estado_W == null)
	        	    {
						_Estado_W = TearOff.Estado;
					}
					return _Estado_W;
				}
			}

			public WhereParameter MensajeGral
		    {
				get
		        {
					if(_MensajeGral_W == null)
	        	    {
						_MensajeGral_W = TearOff.MensajeGral;
					}
					return _MensajeGral_W;
				}
			}

			public WhereParameter EstadoActualBin
		    {
				get
		        {
					if(_EstadoActualBin_W == null)
	        	    {
						_EstadoActualBin_W = TearOff.EstadoActualBin;
					}
					return _EstadoActualBin_W;
				}
			}

			public WhereParameter IdxSingleStatus
		    {
				get
		        {
					if(_IdxSingleStatus_W == null)
	        	    {
						_IdxSingleStatus_W = TearOff.IdxSingleStatus;
					}
					return _IdxSingleStatus_W;
				}
			}

			public WhereParameter MensajeEActual
		    {
				get
		        {
					if(_MensajeEActual_W == null)
	        	    {
						_MensajeEActual_W = TearOff.MensajeEActual;
					}
					return _MensajeEActual_W;
				}
			}

			public WhereParameter ArchivoXML
		    {
				get
		        {
					if(_ArchivoXML_W == null)
	        	    {
						_ArchivoXML_W = TearOff.ArchivoXML;
					}
					return _ArchivoXML_W;
				}
			}

			public WhereParameter FechaAlta
		    {
				get
		        {
					if(_FechaAlta_W == null)
	        	    {
						_FechaAlta_W = TearOff.FechaAlta;
					}
					return _FechaAlta_W;
				}
			}

			public WhereParameter IdUsuario
		    {
				get
		        {
					if(_IdUsuario_W == null)
	        	    {
						_IdUsuario_W = TearOff.IdUsuario;
					}
					return _IdUsuario_W;
				}
			}

			public WhereParameter FechaModificacion
		    {
				get
		        {
					if(_FechaModificacion_W == null)
	        	    {
						_FechaModificacion_W = TearOff.FechaModificacion;
					}
					return _FechaModificacion_W;
				}
			}

			public WhereParameter IdUsuarioModificacion
		    {
				get
		        {
					if(_IdUsuarioModificacion_W == null)
	        	    {
						_IdUsuarioModificacion_W = TearOff.IdUsuarioModificacion;
					}
					return _IdUsuarioModificacion_W;
				}
			}

			private WhereParameter _Secuencia_W = null;
			private WhereParameter _Periodo_W = null;
			private WhereParameter _Tipo_W = null;
			private WhereParameter _Estado_W = null;
			private WhereParameter _MensajeGral_W = null;
			private WhereParameter _EstadoActualBin_W = null;
			private WhereParameter _IdxSingleStatus_W = null;
			private WhereParameter _MensajeEActual_W = null;
			private WhereParameter _ArchivoXML_W = null;
			private WhereParameter _FechaAlta_W = null;
			private WhereParameter _IdUsuario_W = null;
			private WhereParameter _FechaModificacion_W = null;
			private WhereParameter _IdUsuarioModificacion_W = null;

			public void WhereClauseReset()
			{
				_Secuencia_W = null;
				_Periodo_W = null;
				_Tipo_W = null;
				_Estado_W = null;
				_MensajeGral_W = null;
				_EstadoActualBin_W = null;
				_IdxSingleStatus_W = null;
				_MensajeEActual_W = null;
				_ArchivoXML_W = null;
				_FechaAlta_W = null;
				_IdUsuario_W = null;
				_FechaModificacion_W = null;
				_IdUsuarioModificacion_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Secuencia
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Secuencia, Parameters.Secuencia);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Periodo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Periodo, Parameters.Periodo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Tipo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Tipo, Parameters.Tipo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Estado
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Estado, Parameters.Estado);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MensajeGral
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MensajeGral, Parameters.MensajeGral);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EstadoActualBin
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EstadoActualBin, Parameters.EstadoActualBin);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IdxSingleStatus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IdxSingleStatus, Parameters.IdxSingleStatus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MensajeEActual
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MensajeEActual, Parameters.MensajeEActual);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ArchivoXML
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ArchivoXML, Parameters.ArchivoXML);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FechaAlta
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FechaAlta, Parameters.FechaAlta);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IdUsuario
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IdUsuario, Parameters.IdUsuario);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FechaModificacion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FechaModificacion, Parameters.FechaModificacion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IdUsuarioModificacion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IdUsuarioModificacion, Parameters.IdUsuarioModificacion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Secuencia
		    {
				get
		        {
					if(_Secuencia_W == null)
	        	    {
						_Secuencia_W = TearOff.Secuencia;
					}
					return _Secuencia_W;
				}
			}

			public AggregateParameter Periodo
		    {
				get
		        {
					if(_Periodo_W == null)
	        	    {
						_Periodo_W = TearOff.Periodo;
					}
					return _Periodo_W;
				}
			}

			public AggregateParameter Tipo
		    {
				get
		        {
					if(_Tipo_W == null)
	        	    {
						_Tipo_W = TearOff.Tipo;
					}
					return _Tipo_W;
				}
			}

			public AggregateParameter Estado
		    {
				get
		        {
					if(_Estado_W == null)
	        	    {
						_Estado_W = TearOff.Estado;
					}
					return _Estado_W;
				}
			}

			public AggregateParameter MensajeGral
		    {
				get
		        {
					if(_MensajeGral_W == null)
	        	    {
						_MensajeGral_W = TearOff.MensajeGral;
					}
					return _MensajeGral_W;
				}
			}

			public AggregateParameter EstadoActualBin
		    {
				get
		        {
					if(_EstadoActualBin_W == null)
	        	    {
						_EstadoActualBin_W = TearOff.EstadoActualBin;
					}
					return _EstadoActualBin_W;
				}
			}

			public AggregateParameter IdxSingleStatus
		    {
				get
		        {
					if(_IdxSingleStatus_W == null)
	        	    {
						_IdxSingleStatus_W = TearOff.IdxSingleStatus;
					}
					return _IdxSingleStatus_W;
				}
			}

			public AggregateParameter MensajeEActual
		    {
				get
		        {
					if(_MensajeEActual_W == null)
	        	    {
						_MensajeEActual_W = TearOff.MensajeEActual;
					}
					return _MensajeEActual_W;
				}
			}

			public AggregateParameter ArchivoXML
		    {
				get
		        {
					if(_ArchivoXML_W == null)
	        	    {
						_ArchivoXML_W = TearOff.ArchivoXML;
					}
					return _ArchivoXML_W;
				}
			}

			public AggregateParameter FechaAlta
		    {
				get
		        {
					if(_FechaAlta_W == null)
	        	    {
						_FechaAlta_W = TearOff.FechaAlta;
					}
					return _FechaAlta_W;
				}
			}

			public AggregateParameter IdUsuario
		    {
				get
		        {
					if(_IdUsuario_W == null)
	        	    {
						_IdUsuario_W = TearOff.IdUsuario;
					}
					return _IdUsuario_W;
				}
			}

			public AggregateParameter FechaModificacion
		    {
				get
		        {
					if(_FechaModificacion_W == null)
	        	    {
						_FechaModificacion_W = TearOff.FechaModificacion;
					}
					return _FechaModificacion_W;
				}
			}

			public AggregateParameter IdUsuarioModificacion
		    {
				get
		        {
					if(_IdUsuarioModificacion_W == null)
	        	    {
						_IdUsuarioModificacion_W = TearOff.IdUsuarioModificacion;
					}
					return _IdUsuarioModificacion_W;
				}
			}

			private AggregateParameter _Secuencia_W = null;
			private AggregateParameter _Periodo_W = null;
			private AggregateParameter _Tipo_W = null;
			private AggregateParameter _Estado_W = null;
			private AggregateParameter _MensajeGral_W = null;
			private AggregateParameter _EstadoActualBin_W = null;
			private AggregateParameter _IdxSingleStatus_W = null;
			private AggregateParameter _MensajeEActual_W = null;
			private AggregateParameter _ArchivoXML_W = null;
			private AggregateParameter _FechaAlta_W = null;
			private AggregateParameter _IdUsuario_W = null;
			private AggregateParameter _FechaModificacion_W = null;
			private AggregateParameter _IdUsuarioModificacion_W = null;

			public void AggregateClauseReset()
			{
				_Secuencia_W = null;
				_Periodo_W = null;
				_Tipo_W = null;
				_Estado_W = null;
				_MensajeGral_W = null;
				_EstadoActualBin_W = null;
				_IdxSingleStatus_W = null;
				_MensajeEActual_W = null;
				_ArchivoXML_W = null;
				_FechaAlta_W = null;
				_IdUsuario_W = null;
				_FechaModificacion_W = null;
				_IdUsuarioModificacion_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_cfdLogLibroCVInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.Secuencia.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_cfdLogLibroCVUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_cfdLogLibroCVDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.Periodo);
			p.SourceColumn = ColumnNames.Periodo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Tipo);
			p.SourceColumn = ColumnNames.Tipo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Estado);
			p.SourceColumn = ColumnNames.Estado;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.Secuencia);
			p.SourceColumn = ColumnNames.Secuencia;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Periodo);
			p.SourceColumn = ColumnNames.Periodo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Tipo);
			p.SourceColumn = ColumnNames.Tipo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Estado);
			p.SourceColumn = ColumnNames.Estado;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MensajeGral);
			p.SourceColumn = ColumnNames.MensajeGral;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EstadoActualBin);
			p.SourceColumn = ColumnNames.EstadoActualBin;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IdxSingleStatus);
			p.SourceColumn = ColumnNames.IdxSingleStatus;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MensajeEActual);
			p.SourceColumn = ColumnNames.MensajeEActual;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ArchivoXML);
			p.SourceColumn = ColumnNames.ArchivoXML;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FechaAlta);
			p.SourceColumn = ColumnNames.FechaAlta;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IdUsuario);
			p.SourceColumn = ColumnNames.IdUsuario;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FechaModificacion);
			p.SourceColumn = ColumnNames.FechaModificacion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IdUsuarioModificacion);
			p.SourceColumn = ColumnNames.IdUsuarioModificacion;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
