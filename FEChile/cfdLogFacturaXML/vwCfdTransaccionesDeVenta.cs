/*
'===============================================================================
'  Generated From - CSharp_dOOdads_View.vbgen
'
'  The supporting base class SqlClientEntity is in the 
'  Architecture directory in "dOOdads".
'===============================================================================
*/

// Generated by MyGeneration Version # (1.4.0.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace cfd.FacturaElectronica
{
	public class vwCfdTransaccionesDeVenta : SqlClientEntity
	{
		public vwCfdTransaccionesDeVenta()
		{
			this.QuerySource = "vwCfdTransaccionesDeVenta";
			this.MappingName = "vwCfdTransaccionesDeVenta";
		}	
		        //23/5/12 jcf Crea constructor con cadena de conexión
        public vwCfdTransaccionesDeVenta(string connstr)
        {
            this.ConnectionString = connstr;
            this.QuerySource = "vwCfdTransaccionesDeVenta";
            this.MappingName = "vwCfdTransaccionesDeVenta";
        }	
	
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			return base.Query.Load();
		}
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
	
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter EstadoContabilizado
			{
				get
				{
					return new SqlParameter("@EstadoContabilizado", SqlDbType.VarChar, 13);
				}
			}
			
			public static SqlParameter Soptype
			{
				get
				{
					return new SqlParameter("@Soptype", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter Docid
			{
				get
				{
					return new SqlParameter("@Docid", SqlDbType.VarChar, 15);
				}
			}
			
			public static SqlParameter Sopnumbe
			{
				get
				{
					return new SqlParameter("@Sopnumbe", SqlDbType.VarChar, 21);
				}
			}
			
			public static SqlParameter Fechahora
			{
				get
				{
					return new SqlParameter("@Fechahora", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter CUSTNMBR
			{
				get
				{
					return new SqlParameter("@CUSTNMBR", SqlDbType.Char, 15);
				}
			}
			
			public static SqlParameter NombreCliente
			{
				get
				{
					return new SqlParameter("@NombreCliente", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter IdImpuestoCliente
			{
				get
				{
					return new SqlParameter("@IdImpuestoCliente", SqlDbType.VarChar, 8000);
				}
			}
			
			public static SqlParameter Total
			{
				get
				{
					return new SqlParameter("@Total", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter Voidstts
			{
				get
				{
					return new SqlParameter("@Voidstts", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter Estado
			{
				get
				{
					return new SqlParameter("@Estado", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter Doctype
			{
				get
				{
					return new SqlParameter("@Doctype", SqlDbType.VarChar, 15);
				}
			}
			
			public static SqlParameter NombreTipoDoc
			{
				get
				{
					return new SqlParameter("@NombreTipoDoc", SqlDbType.VarChar, 38);
				}
			}
			
			public static SqlParameter Folio
			{
				get
				{
					return new SqlParameter("@Folio", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Fecha
			{
				get
				{
					return new SqlParameter("@Fecha", SqlDbType.VarChar, 8000);
				}
			}
			
			public static SqlParameter Mensaje
			{
				get
				{
					return new SqlParameter("@Mensaje", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter ComprobanteXml
			{
				get
				{
					return new SqlParameter("@ComprobanteXml", SqlDbType.Xml, 1073741823);
				}
			}
			
			public static SqlParameter IdClienteRepLegal
			{
				get
				{
					return new SqlParameter("@IdClienteRepLegal", SqlDbType.VarChar, 8000);
				}
			}
			
			public static SqlParameter NroResol
			{
				get
				{
					return new SqlParameter("@NroResol", SqlDbType.VarChar, 8000);
				}
			}
			
			public static SqlParameter FchResol
			{
				get
				{
					return new SqlParameter("@FchResol", SqlDbType.VarChar, 8000);
				}
			}
			
			public static SqlParameter IdImpuesto
			{
				get
				{
					return new SqlParameter("@IdImpuesto", SqlDbType.VarChar, 11);
				}
			}
			
			public static SqlParameter RutaCerts
			{
				get
				{
					return new SqlParameter("@RutaCerts", SqlDbType.Char, 255);
				}
			}
			
			public static SqlParameter RutaXml
			{
				get
				{
					return new SqlParameter("@RutaXml", SqlDbType.NVarChar, 1073741823);
				}
			}
			
			public static SqlParameter EstadoActual
			{
				get
				{
					return new SqlParameter("@EstadoActual", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter MensajeEA
			{
				get
				{
					return new SqlParameter("@MensajeEA", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter IdxSingleStatus
			{
				get
				{
					return new SqlParameter("@IdxSingleStatus", SqlDbType.VarChar, 21);
				}
			}
			
			public static SqlParameter USERDEF1
			{
				get
				{
					return new SqlParameter("@USERDEF1", SqlDbType.VarChar, 21);
				}
			}
			
		}
		#endregion	
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string EstadoContabilizado = "estadoContabilizado";
            public const string Soptype = "soptype";
            public const string Docid = "docid";
            public const string Sopnumbe = "sopnumbe";
            public const string Fechahora = "fechahora";
            public const string CUSTNMBR = "CUSTNMBR";
            public const string NombreCliente = "nombreCliente";
            public const string IdImpuestoCliente = "idImpuestoCliente";
            public const string Total = "total";
            public const string Voidstts = "voidstts";
            public const string Estado = "estado";
            public const string Doctype = "doctype";
            public const string NombreTipoDoc = "nombreTipoDoc";
            public const string Folio = "folio";
            public const string Fecha = "fecha";
            public const string Mensaje = "mensaje";
            public const string ComprobanteXml = "comprobanteXml";
            public const string IdClienteRepLegal = "idClienteRepLegal";
            public const string NroResol = "nroResol";
            public const string FchResol = "fchResol";
            public const string IdImpuesto = "idImpuesto";
            public const string RutaCerts = "rutaCerts";
            public const string RutaXml = "rutaXml";
            public const string EstadoActual = "estadoActual";
            public const string MensajeEA = "mensajeEA";
            public const string IdxSingleStatus = "idxSingleStatus";
            public const string USERDEF1 = "USERDEF1";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[EstadoContabilizado] = vwCfdTransaccionesDeVenta.PropertyNames.EstadoContabilizado;
					ht[Soptype] = vwCfdTransaccionesDeVenta.PropertyNames.Soptype;
					ht[Docid] = vwCfdTransaccionesDeVenta.PropertyNames.Docid;
					ht[Sopnumbe] = vwCfdTransaccionesDeVenta.PropertyNames.Sopnumbe;
					ht[Fechahora] = vwCfdTransaccionesDeVenta.PropertyNames.Fechahora;
					ht[CUSTNMBR] = vwCfdTransaccionesDeVenta.PropertyNames.CUSTNMBR;
					ht[NombreCliente] = vwCfdTransaccionesDeVenta.PropertyNames.NombreCliente;
					ht[IdImpuestoCliente] = vwCfdTransaccionesDeVenta.PropertyNames.IdImpuestoCliente;
					ht[Total] = vwCfdTransaccionesDeVenta.PropertyNames.Total;
					ht[Voidstts] = vwCfdTransaccionesDeVenta.PropertyNames.Voidstts;
					ht[Estado] = vwCfdTransaccionesDeVenta.PropertyNames.Estado;
					ht[Doctype] = vwCfdTransaccionesDeVenta.PropertyNames.Doctype;
					ht[NombreTipoDoc] = vwCfdTransaccionesDeVenta.PropertyNames.NombreTipoDoc;
					ht[Folio] = vwCfdTransaccionesDeVenta.PropertyNames.Folio;
					ht[Fecha] = vwCfdTransaccionesDeVenta.PropertyNames.Fecha;
					ht[Mensaje] = vwCfdTransaccionesDeVenta.PropertyNames.Mensaje;
					ht[ComprobanteXml] = vwCfdTransaccionesDeVenta.PropertyNames.ComprobanteXml;
					ht[IdClienteRepLegal] = vwCfdTransaccionesDeVenta.PropertyNames.IdClienteRepLegal;
					ht[NroResol] = vwCfdTransaccionesDeVenta.PropertyNames.NroResol;
					ht[FchResol] = vwCfdTransaccionesDeVenta.PropertyNames.FchResol;
					ht[IdImpuesto] = vwCfdTransaccionesDeVenta.PropertyNames.IdImpuesto;
					ht[RutaCerts] = vwCfdTransaccionesDeVenta.PropertyNames.RutaCerts;
					ht[RutaXml] = vwCfdTransaccionesDeVenta.PropertyNames.RutaXml;
					ht[EstadoActual] = vwCfdTransaccionesDeVenta.PropertyNames.EstadoActual;
					ht[MensajeEA] = vwCfdTransaccionesDeVenta.PropertyNames.MensajeEA;
					ht[IdxSingleStatus] = vwCfdTransaccionesDeVenta.PropertyNames.IdxSingleStatus;
					ht[USERDEF1] = vwCfdTransaccionesDeVenta.PropertyNames.USERDEF1;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string EstadoContabilizado = "EstadoContabilizado";
            public const string Soptype = "Soptype";
            public const string Docid = "Docid";
            public const string Sopnumbe = "Sopnumbe";
            public const string Fechahora = "Fechahora";
            public const string CUSTNMBR = "CUSTNMBR";
            public const string NombreCliente = "NombreCliente";
            public const string IdImpuestoCliente = "IdImpuestoCliente";
            public const string Total = "Total";
            public const string Voidstts = "Voidstts";
            public const string Estado = "Estado";
            public const string Doctype = "Doctype";
            public const string NombreTipoDoc = "NombreTipoDoc";
            public const string Folio = "Folio";
            public const string Fecha = "Fecha";
            public const string Mensaje = "Mensaje";
            public const string ComprobanteXml = "ComprobanteXml";
            public const string IdClienteRepLegal = "IdClienteRepLegal";
            public const string NroResol = "NroResol";
            public const string FchResol = "FchResol";
            public const string IdImpuesto = "IdImpuesto";
            public const string RutaCerts = "RutaCerts";
            public const string RutaXml = "RutaXml";
            public const string EstadoActual = "EstadoActual";
            public const string MensajeEA = "MensajeEA";
            public const string IdxSingleStatus = "IdxSingleStatus";
            public const string USERDEF1 = "USERDEF1";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[EstadoContabilizado] = vwCfdTransaccionesDeVenta.ColumnNames.EstadoContabilizado;
					ht[Soptype] = vwCfdTransaccionesDeVenta.ColumnNames.Soptype;
					ht[Docid] = vwCfdTransaccionesDeVenta.ColumnNames.Docid;
					ht[Sopnumbe] = vwCfdTransaccionesDeVenta.ColumnNames.Sopnumbe;
					ht[Fechahora] = vwCfdTransaccionesDeVenta.ColumnNames.Fechahora;
					ht[CUSTNMBR] = vwCfdTransaccionesDeVenta.ColumnNames.CUSTNMBR;
					ht[NombreCliente] = vwCfdTransaccionesDeVenta.ColumnNames.NombreCliente;
					ht[IdImpuestoCliente] = vwCfdTransaccionesDeVenta.ColumnNames.IdImpuestoCliente;
					ht[Total] = vwCfdTransaccionesDeVenta.ColumnNames.Total;
					ht[Voidstts] = vwCfdTransaccionesDeVenta.ColumnNames.Voidstts;
					ht[Estado] = vwCfdTransaccionesDeVenta.ColumnNames.Estado;
					ht[Doctype] = vwCfdTransaccionesDeVenta.ColumnNames.Doctype;
					ht[NombreTipoDoc] = vwCfdTransaccionesDeVenta.ColumnNames.NombreTipoDoc;
					ht[Folio] = vwCfdTransaccionesDeVenta.ColumnNames.Folio;
					ht[Fecha] = vwCfdTransaccionesDeVenta.ColumnNames.Fecha;
					ht[Mensaje] = vwCfdTransaccionesDeVenta.ColumnNames.Mensaje;
					ht[ComprobanteXml] = vwCfdTransaccionesDeVenta.ColumnNames.ComprobanteXml;
					ht[IdClienteRepLegal] = vwCfdTransaccionesDeVenta.ColumnNames.IdClienteRepLegal;
					ht[NroResol] = vwCfdTransaccionesDeVenta.ColumnNames.NroResol;
					ht[FchResol] = vwCfdTransaccionesDeVenta.ColumnNames.FchResol;
					ht[IdImpuesto] = vwCfdTransaccionesDeVenta.ColumnNames.IdImpuesto;
					ht[RutaCerts] = vwCfdTransaccionesDeVenta.ColumnNames.RutaCerts;
					ht[RutaXml] = vwCfdTransaccionesDeVenta.ColumnNames.RutaXml;
					ht[EstadoActual] = vwCfdTransaccionesDeVenta.ColumnNames.EstadoActual;
					ht[MensajeEA] = vwCfdTransaccionesDeVenta.ColumnNames.MensajeEA;
					ht[IdxSingleStatus] = vwCfdTransaccionesDeVenta.ColumnNames.IdxSingleStatus;
					ht[USERDEF1] = vwCfdTransaccionesDeVenta.ColumnNames.USERDEF1;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string EstadoContabilizado = "s_EstadoContabilizado";
            public const string Soptype = "s_Soptype";
            public const string Docid = "s_Docid";
            public const string Sopnumbe = "s_Sopnumbe";
            public const string Fechahora = "s_Fechahora";
            public const string CUSTNMBR = "s_CUSTNMBR";
            public const string NombreCliente = "s_NombreCliente";
            public const string IdImpuestoCliente = "s_IdImpuestoCliente";
            public const string Total = "s_Total";
            public const string Voidstts = "s_Voidstts";
            public const string Estado = "s_Estado";
            public const string Doctype = "s_Doctype";
            public const string NombreTipoDoc = "s_NombreTipoDoc";
            public const string Folio = "s_Folio";
            public const string Fecha = "s_Fecha";
            public const string Mensaje = "s_Mensaje";
            public const string ComprobanteXml = "s_ComprobanteXml";
            public const string IdClienteRepLegal = "s_IdClienteRepLegal";
            public const string NroResol = "s_NroResol";
            public const string FchResol = "s_FchResol";
            public const string IdImpuesto = "s_IdImpuesto";
            public const string RutaCerts = "s_RutaCerts";
            public const string RutaXml = "s_RutaXml";
            public const string EstadoActual = "s_EstadoActual";
            public const string MensajeEA = "s_MensajeEA";
            public const string IdxSingleStatus = "s_IdxSingleStatus";
            public const string USERDEF1 = "s_USERDEF1";

		}
		#endregion	
		
		#region Properties
			public virtual string EstadoContabilizado
	    {
			get
	        {
				return base.Getstring(ColumnNames.EstadoContabilizado);
			}
			set
	        {
				base.Setstring(ColumnNames.EstadoContabilizado, value);
			}
		}

		public virtual short Soptype
	    {
			get
	        {
				return base.Getshort(ColumnNames.Soptype);
			}
			set
	        {
				base.Setshort(ColumnNames.Soptype, value);
			}
		}

		public virtual string Docid
	    {
			get
	        {
				return base.Getstring(ColumnNames.Docid);
			}
			set
	        {
				base.Setstring(ColumnNames.Docid, value);
			}
		}

		public virtual string Sopnumbe
	    {
			get
	        {
				return base.Getstring(ColumnNames.Sopnumbe);
			}
			set
	        {
				base.Setstring(ColumnNames.Sopnumbe, value);
			}
		}

		public virtual DateTime Fechahora
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.Fechahora);
			}
			set
	        {
				base.SetDateTime(ColumnNames.Fechahora, value);
			}
		}

		public virtual string CUSTNMBR
	    {
			get
	        {
				return base.Getstring(ColumnNames.CUSTNMBR);
			}
			set
	        {
				base.Setstring(ColumnNames.CUSTNMBR, value);
			}
		}

		public virtual string NombreCliente
	    {
			get
	        {
				return base.Getstring(ColumnNames.NombreCliente);
			}
			set
	        {
				base.Setstring(ColumnNames.NombreCliente, value);
			}
		}

		public virtual string IdImpuestoCliente
	    {
			get
	        {
				return base.Getstring(ColumnNames.IdImpuestoCliente);
			}
			set
	        {
				base.Setstring(ColumnNames.IdImpuestoCliente, value);
			}
		}

		public virtual decimal Total
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.Total);
			}
			set
	        {
				base.Setdecimal(ColumnNames.Total, value);
			}
		}

		public virtual short Voidstts
	    {
			get
	        {
				return base.Getshort(ColumnNames.Voidstts);
			}
			set
	        {
				base.Setshort(ColumnNames.Voidstts, value);
			}
		}

		public virtual string Estado
	    {
			get
	        {
				return base.Getstring(ColumnNames.Estado);
			}
			set
	        {
				base.Setstring(ColumnNames.Estado, value);
			}
		}

		public virtual string Doctype
	    {
			get
	        {
				return base.Getstring(ColumnNames.Doctype);
			}
			set
	        {
				base.Setstring(ColumnNames.Doctype, value);
			}
		}

		public virtual string NombreTipoDoc
	    {
			get
	        {
				return base.Getstring(ColumnNames.NombreTipoDoc);
			}
			set
	        {
				base.Setstring(ColumnNames.NombreTipoDoc, value);
			}
		}

		public virtual int Folio
	    {
			get
	        {
				return base.Getint(ColumnNames.Folio);
			}
			set
	        {
				base.Setint(ColumnNames.Folio, value);
			}
		}

		public virtual string Fecha
	    {
			get
	        {
				return base.Getstring(ColumnNames.Fecha);
			}
			set
	        {
				base.Setstring(ColumnNames.Fecha, value);
			}
		}

		public virtual string Mensaje
	    {
			get
	        {
				return base.Getstring(ColumnNames.Mensaje);
			}
			set
	        {
				base.Setstring(ColumnNames.Mensaje, value);
			}
		}

		public virtual string ComprobanteXml
	    {
			get
	        {
				return base.Getstring(ColumnNames.ComprobanteXml);
			}
			set
	        {
				base.Setstring(ColumnNames.ComprobanteXml, value);
			}
		}

		public virtual string IdClienteRepLegal
	    {
			get
	        {
				return base.Getstring(ColumnNames.IdClienteRepLegal);
			}
			set
	        {
				base.Setstring(ColumnNames.IdClienteRepLegal, value);
			}
		}

		public virtual string NroResol
	    {
			get
	        {
				return base.Getstring(ColumnNames.NroResol);
			}
			set
	        {
				base.Setstring(ColumnNames.NroResol, value);
			}
		}

		public virtual string FchResol
	    {
			get
	        {
				return base.Getstring(ColumnNames.FchResol);
			}
			set
	        {
				base.Setstring(ColumnNames.FchResol, value);
			}
		}

		public virtual string IdImpuesto
	    {
			get
	        {
				return base.Getstring(ColumnNames.IdImpuesto);
			}
			set
	        {
				base.Setstring(ColumnNames.IdImpuesto, value);
			}
		}

		public virtual string RutaCerts
	    {
			get
	        {
				return base.Getstring(ColumnNames.RutaCerts);
			}
			set
	        {
				base.Setstring(ColumnNames.RutaCerts, value);
			}
		}

		public virtual string RutaXml
	    {
			get
	        {
				return base.Getstring(ColumnNames.RutaXml);
			}
			set
	        {
				base.Setstring(ColumnNames.RutaXml, value);
			}
		}

		public virtual string EstadoActual
	    {
			get
	        {
				return base.Getstring(ColumnNames.EstadoActual);
			}
			set
	        {
				base.Setstring(ColumnNames.EstadoActual, value);
			}
		}

		public virtual string MensajeEA
	    {
			get
	        {
				return base.Getstring(ColumnNames.MensajeEA);
			}
			set
	        {
				base.Setstring(ColumnNames.MensajeEA, value);
			}
		}

		public virtual string IdxSingleStatus
	    {
			get
	        {
				return base.Getstring(ColumnNames.IdxSingleStatus);
			}
			set
	        {
				base.Setstring(ColumnNames.IdxSingleStatus, value);
			}
		}

		public virtual string USERDEF1
	    {
			get
	        {
				return base.Getstring(ColumnNames.USERDEF1);
			}
			set
	        {
				base.Setstring(ColumnNames.USERDEF1, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_EstadoContabilizado
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EstadoContabilizado) ? string.Empty : base.GetstringAsString(ColumnNames.EstadoContabilizado);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EstadoContabilizado);
				else
					this.EstadoContabilizado = base.SetstringAsString(ColumnNames.EstadoContabilizado, value);
			}
		}

		public virtual string s_Soptype
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Soptype) ? string.Empty : base.GetshortAsString(ColumnNames.Soptype);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Soptype);
				else
					this.Soptype = base.SetshortAsString(ColumnNames.Soptype, value);
			}
		}

		public virtual string s_Docid
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Docid) ? string.Empty : base.GetstringAsString(ColumnNames.Docid);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Docid);
				else
					this.Docid = base.SetstringAsString(ColumnNames.Docid, value);
			}
		}

		public virtual string s_Sopnumbe
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Sopnumbe) ? string.Empty : base.GetstringAsString(ColumnNames.Sopnumbe);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Sopnumbe);
				else
					this.Sopnumbe = base.SetstringAsString(ColumnNames.Sopnumbe, value);
			}
		}

		public virtual string s_Fechahora
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Fechahora) ? string.Empty : base.GetDateTimeAsString(ColumnNames.Fechahora);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Fechahora);
				else
					this.Fechahora = base.SetDateTimeAsString(ColumnNames.Fechahora, value);
			}
		}

		public virtual string s_CUSTNMBR
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CUSTNMBR) ? string.Empty : base.GetstringAsString(ColumnNames.CUSTNMBR);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CUSTNMBR);
				else
					this.CUSTNMBR = base.SetstringAsString(ColumnNames.CUSTNMBR, value);
			}
		}

		public virtual string s_NombreCliente
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NombreCliente) ? string.Empty : base.GetstringAsString(ColumnNames.NombreCliente);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NombreCliente);
				else
					this.NombreCliente = base.SetstringAsString(ColumnNames.NombreCliente, value);
			}
		}

		public virtual string s_IdImpuestoCliente
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IdImpuestoCliente) ? string.Empty : base.GetstringAsString(ColumnNames.IdImpuestoCliente);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IdImpuestoCliente);
				else
					this.IdImpuestoCliente = base.SetstringAsString(ColumnNames.IdImpuestoCliente, value);
			}
		}

		public virtual string s_Total
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Total) ? string.Empty : base.GetdecimalAsString(ColumnNames.Total);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Total);
				else
					this.Total = base.SetdecimalAsString(ColumnNames.Total, value);
			}
		}

		public virtual string s_Voidstts
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Voidstts) ? string.Empty : base.GetshortAsString(ColumnNames.Voidstts);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Voidstts);
				else
					this.Voidstts = base.SetshortAsString(ColumnNames.Voidstts, value);
			}
		}

		public virtual string s_Estado
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Estado) ? string.Empty : base.GetstringAsString(ColumnNames.Estado);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Estado);
				else
					this.Estado = base.SetstringAsString(ColumnNames.Estado, value);
			}
		}

		public virtual string s_Doctype
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Doctype) ? string.Empty : base.GetstringAsString(ColumnNames.Doctype);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Doctype);
				else
					this.Doctype = base.SetstringAsString(ColumnNames.Doctype, value);
			}
		}

		public virtual string s_NombreTipoDoc
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NombreTipoDoc) ? string.Empty : base.GetstringAsString(ColumnNames.NombreTipoDoc);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NombreTipoDoc);
				else
					this.NombreTipoDoc = base.SetstringAsString(ColumnNames.NombreTipoDoc, value);
			}
		}

		public virtual string s_Folio
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Folio) ? string.Empty : base.GetintAsString(ColumnNames.Folio);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Folio);
				else
					this.Folio = base.SetintAsString(ColumnNames.Folio, value);
			}
		}

		public virtual string s_Fecha
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Fecha) ? string.Empty : base.GetstringAsString(ColumnNames.Fecha);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Fecha);
				else
					this.Fecha = base.SetstringAsString(ColumnNames.Fecha, value);
			}
		}

		public virtual string s_Mensaje
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Mensaje) ? string.Empty : base.GetstringAsString(ColumnNames.Mensaje);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Mensaje);
				else
					this.Mensaje = base.SetstringAsString(ColumnNames.Mensaje, value);
			}
		}

		public virtual string s_ComprobanteXml
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ComprobanteXml) ? string.Empty : base.GetstringAsString(ColumnNames.ComprobanteXml);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ComprobanteXml);
				else
					this.ComprobanteXml = base.SetstringAsString(ColumnNames.ComprobanteXml, value);
			}
		}

		public virtual string s_IdClienteRepLegal
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IdClienteRepLegal) ? string.Empty : base.GetstringAsString(ColumnNames.IdClienteRepLegal);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IdClienteRepLegal);
				else
					this.IdClienteRepLegal = base.SetstringAsString(ColumnNames.IdClienteRepLegal, value);
			}
		}

		public virtual string s_NroResol
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NroResol) ? string.Empty : base.GetstringAsString(ColumnNames.NroResol);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NroResol);
				else
					this.NroResol = base.SetstringAsString(ColumnNames.NroResol, value);
			}
		}

		public virtual string s_FchResol
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FchResol) ? string.Empty : base.GetstringAsString(ColumnNames.FchResol);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FchResol);
				else
					this.FchResol = base.SetstringAsString(ColumnNames.FchResol, value);
			}
		}

		public virtual string s_IdImpuesto
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IdImpuesto) ? string.Empty : base.GetstringAsString(ColumnNames.IdImpuesto);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IdImpuesto);
				else
					this.IdImpuesto = base.SetstringAsString(ColumnNames.IdImpuesto, value);
			}
		}

		public virtual string s_RutaCerts
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RutaCerts) ? string.Empty : base.GetstringAsString(ColumnNames.RutaCerts);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RutaCerts);
				else
					this.RutaCerts = base.SetstringAsString(ColumnNames.RutaCerts, value);
			}
		}

		public virtual string s_RutaXml
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RutaXml) ? string.Empty : base.GetstringAsString(ColumnNames.RutaXml);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RutaXml);
				else
					this.RutaXml = base.SetstringAsString(ColumnNames.RutaXml, value);
			}
		}

		public virtual string s_EstadoActual
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EstadoActual) ? string.Empty : base.GetstringAsString(ColumnNames.EstadoActual);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EstadoActual);
				else
					this.EstadoActual = base.SetstringAsString(ColumnNames.EstadoActual, value);
			}
		}

		public virtual string s_MensajeEA
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MensajeEA) ? string.Empty : base.GetstringAsString(ColumnNames.MensajeEA);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MensajeEA);
				else
					this.MensajeEA = base.SetstringAsString(ColumnNames.MensajeEA, value);
			}
		}

		public virtual string s_IdxSingleStatus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IdxSingleStatus) ? string.Empty : base.GetstringAsString(ColumnNames.IdxSingleStatus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IdxSingleStatus);
				else
					this.IdxSingleStatus = base.SetstringAsString(ColumnNames.IdxSingleStatus, value);
			}
		}

		public virtual string s_USERDEF1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.USERDEF1) ? string.Empty : base.GetstringAsString(ColumnNames.USERDEF1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.USERDEF1);
				else
					this.USERDEF1 = base.SetstringAsString(ColumnNames.USERDEF1, value);
			}
		}


		#endregion			
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter EstadoContabilizado
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EstadoContabilizado, Parameters.EstadoContabilizado);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Soptype
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Soptype, Parameters.Soptype);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Docid
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Docid, Parameters.Docid);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Sopnumbe
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Sopnumbe, Parameters.Sopnumbe);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Fechahora
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Fechahora, Parameters.Fechahora);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CUSTNMBR
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CUSTNMBR, Parameters.CUSTNMBR);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NombreCliente
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NombreCliente, Parameters.NombreCliente);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IdImpuestoCliente
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IdImpuestoCliente, Parameters.IdImpuestoCliente);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Total
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Total, Parameters.Total);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Voidstts
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Voidstts, Parameters.Voidstts);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Estado
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Estado, Parameters.Estado);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Doctype
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Doctype, Parameters.Doctype);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NombreTipoDoc
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NombreTipoDoc, Parameters.NombreTipoDoc);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Folio
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Folio, Parameters.Folio);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Fecha
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Fecha, Parameters.Fecha);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Mensaje
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Mensaje, Parameters.Mensaje);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ComprobanteXml
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ComprobanteXml, Parameters.ComprobanteXml);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IdClienteRepLegal
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IdClienteRepLegal, Parameters.IdClienteRepLegal);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NroResol
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NroResol, Parameters.NroResol);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FchResol
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FchResol, Parameters.FchResol);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IdImpuesto
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IdImpuesto, Parameters.IdImpuesto);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RutaCerts
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RutaCerts, Parameters.RutaCerts);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RutaXml
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RutaXml, Parameters.RutaXml);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EstadoActual
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EstadoActual, Parameters.EstadoActual);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MensajeEA
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MensajeEA, Parameters.MensajeEA);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IdxSingleStatus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IdxSingleStatus, Parameters.IdxSingleStatus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter USERDEF1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.USERDEF1, Parameters.USERDEF1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter EstadoContabilizado
		    {
				get
		        {
					if(_EstadoContabilizado_W == null)
	        	    {
						_EstadoContabilizado_W = TearOff.EstadoContabilizado;
					}
					return _EstadoContabilizado_W;
				}
			}

			public WhereParameter Soptype
		    {
				get
		        {
					if(_Soptype_W == null)
	        	    {
						_Soptype_W = TearOff.Soptype;
					}
					return _Soptype_W;
				}
			}

			public WhereParameter Docid
		    {
				get
		        {
					if(_Docid_W == null)
	        	    {
						_Docid_W = TearOff.Docid;
					}
					return _Docid_W;
				}
			}

			public WhereParameter Sopnumbe
		    {
				get
		        {
					if(_Sopnumbe_W == null)
	        	    {
						_Sopnumbe_W = TearOff.Sopnumbe;
					}
					return _Sopnumbe_W;
				}
			}

			public WhereParameter Fechahora
		    {
				get
		        {
					if(_Fechahora_W == null)
	        	    {
						_Fechahora_W = TearOff.Fechahora;
					}
					return _Fechahora_W;
				}
			}

			public WhereParameter CUSTNMBR
		    {
				get
		        {
					if(_CUSTNMBR_W == null)
	        	    {
						_CUSTNMBR_W = TearOff.CUSTNMBR;
					}
					return _CUSTNMBR_W;
				}
			}

			public WhereParameter NombreCliente
		    {
				get
		        {
					if(_NombreCliente_W == null)
	        	    {
						_NombreCliente_W = TearOff.NombreCliente;
					}
					return _NombreCliente_W;
				}
			}

			public WhereParameter IdImpuestoCliente
		    {
				get
		        {
					if(_IdImpuestoCliente_W == null)
	        	    {
						_IdImpuestoCliente_W = TearOff.IdImpuestoCliente;
					}
					return _IdImpuestoCliente_W;
				}
			}

			public WhereParameter Total
		    {
				get
		        {
					if(_Total_W == null)
	        	    {
						_Total_W = TearOff.Total;
					}
					return _Total_W;
				}
			}

			public WhereParameter Voidstts
		    {
				get
		        {
					if(_Voidstts_W == null)
	        	    {
						_Voidstts_W = TearOff.Voidstts;
					}
					return _Voidstts_W;
				}
			}

			public WhereParameter Estado
		    {
				get
		        {
					if(_Estado_W == null)
	        	    {
						_Estado_W = TearOff.Estado;
					}
					return _Estado_W;
				}
			}

			public WhereParameter Doctype
		    {
				get
		        {
					if(_Doctype_W == null)
	        	    {
						_Doctype_W = TearOff.Doctype;
					}
					return _Doctype_W;
				}
			}

			public WhereParameter NombreTipoDoc
		    {
				get
		        {
					if(_NombreTipoDoc_W == null)
	        	    {
						_NombreTipoDoc_W = TearOff.NombreTipoDoc;
					}
					return _NombreTipoDoc_W;
				}
			}

			public WhereParameter Folio
		    {
				get
		        {
					if(_Folio_W == null)
	        	    {
						_Folio_W = TearOff.Folio;
					}
					return _Folio_W;
				}
			}

			public WhereParameter Fecha
		    {
				get
		        {
					if(_Fecha_W == null)
	        	    {
						_Fecha_W = TearOff.Fecha;
					}
					return _Fecha_W;
				}
			}

			public WhereParameter Mensaje
		    {
				get
		        {
					if(_Mensaje_W == null)
	        	    {
						_Mensaje_W = TearOff.Mensaje;
					}
					return _Mensaje_W;
				}
			}

			public WhereParameter ComprobanteXml
		    {
				get
		        {
					if(_ComprobanteXml_W == null)
	        	    {
						_ComprobanteXml_W = TearOff.ComprobanteXml;
					}
					return _ComprobanteXml_W;
				}
			}

			public WhereParameter IdClienteRepLegal
		    {
				get
		        {
					if(_IdClienteRepLegal_W == null)
	        	    {
						_IdClienteRepLegal_W = TearOff.IdClienteRepLegal;
					}
					return _IdClienteRepLegal_W;
				}
			}

			public WhereParameter NroResol
		    {
				get
		        {
					if(_NroResol_W == null)
	        	    {
						_NroResol_W = TearOff.NroResol;
					}
					return _NroResol_W;
				}
			}

			public WhereParameter FchResol
		    {
				get
		        {
					if(_FchResol_W == null)
	        	    {
						_FchResol_W = TearOff.FchResol;
					}
					return _FchResol_W;
				}
			}

			public WhereParameter IdImpuesto
		    {
				get
		        {
					if(_IdImpuesto_W == null)
	        	    {
						_IdImpuesto_W = TearOff.IdImpuesto;
					}
					return _IdImpuesto_W;
				}
			}

			public WhereParameter RutaCerts
		    {
				get
		        {
					if(_RutaCerts_W == null)
	        	    {
						_RutaCerts_W = TearOff.RutaCerts;
					}
					return _RutaCerts_W;
				}
			}

			public WhereParameter RutaXml
		    {
				get
		        {
					if(_RutaXml_W == null)
	        	    {
						_RutaXml_W = TearOff.RutaXml;
					}
					return _RutaXml_W;
				}
			}

			public WhereParameter EstadoActual
		    {
				get
		        {
					if(_EstadoActual_W == null)
	        	    {
						_EstadoActual_W = TearOff.EstadoActual;
					}
					return _EstadoActual_W;
				}
			}

			public WhereParameter MensajeEA
		    {
				get
		        {
					if(_MensajeEA_W == null)
	        	    {
						_MensajeEA_W = TearOff.MensajeEA;
					}
					return _MensajeEA_W;
				}
			}

			public WhereParameter IdxSingleStatus
		    {
				get
		        {
					if(_IdxSingleStatus_W == null)
	        	    {
						_IdxSingleStatus_W = TearOff.IdxSingleStatus;
					}
					return _IdxSingleStatus_W;
				}
			}

			public WhereParameter USERDEF1
		    {
				get
		        {
					if(_USERDEF1_W == null)
	        	    {
						_USERDEF1_W = TearOff.USERDEF1;
					}
					return _USERDEF1_W;
				}
			}

			private WhereParameter _EstadoContabilizado_W = null;
			private WhereParameter _Soptype_W = null;
			private WhereParameter _Docid_W = null;
			private WhereParameter _Sopnumbe_W = null;
			private WhereParameter _Fechahora_W = null;
			private WhereParameter _CUSTNMBR_W = null;
			private WhereParameter _NombreCliente_W = null;
			private WhereParameter _IdImpuestoCliente_W = null;
			private WhereParameter _Total_W = null;
			private WhereParameter _Voidstts_W = null;
			private WhereParameter _Estado_W = null;
			private WhereParameter _Doctype_W = null;
			private WhereParameter _NombreTipoDoc_W = null;
			private WhereParameter _Folio_W = null;
			private WhereParameter _Fecha_W = null;
			private WhereParameter _Mensaje_W = null;
			private WhereParameter _ComprobanteXml_W = null;
			private WhereParameter _IdClienteRepLegal_W = null;
			private WhereParameter _NroResol_W = null;
			private WhereParameter _FchResol_W = null;
			private WhereParameter _IdImpuesto_W = null;
			private WhereParameter _RutaCerts_W = null;
			private WhereParameter _RutaXml_W = null;
			private WhereParameter _EstadoActual_W = null;
			private WhereParameter _MensajeEA_W = null;
			private WhereParameter _IdxSingleStatus_W = null;
			private WhereParameter _USERDEF1_W = null;

			public void WhereClauseReset()
			{
				_EstadoContabilizado_W = null;
				_Soptype_W = null;
				_Docid_W = null;
				_Sopnumbe_W = null;
				_Fechahora_W = null;
				_CUSTNMBR_W = null;
				_NombreCliente_W = null;
				_IdImpuestoCliente_W = null;
				_Total_W = null;
				_Voidstts_W = null;
				_Estado_W = null;
				_Doctype_W = null;
				_NombreTipoDoc_W = null;
				_Folio_W = null;
				_Fecha_W = null;
				_Mensaje_W = null;
				_ComprobanteXml_W = null;
				_IdClienteRepLegal_W = null;
				_NroResol_W = null;
				_FchResol_W = null;
				_IdImpuesto_W = null;
				_RutaCerts_W = null;
				_RutaXml_W = null;
				_EstadoActual_W = null;
				_MensajeEA_W = null;
				_IdxSingleStatus_W = null;
				_USERDEF1_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter EstadoContabilizado
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EstadoContabilizado, Parameters.EstadoContabilizado);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Soptype
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Soptype, Parameters.Soptype);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Docid
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Docid, Parameters.Docid);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Sopnumbe
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Sopnumbe, Parameters.Sopnumbe);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Fechahora
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Fechahora, Parameters.Fechahora);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CUSTNMBR
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CUSTNMBR, Parameters.CUSTNMBR);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NombreCliente
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NombreCliente, Parameters.NombreCliente);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IdImpuestoCliente
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IdImpuestoCliente, Parameters.IdImpuestoCliente);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Total
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Total, Parameters.Total);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Voidstts
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Voidstts, Parameters.Voidstts);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Estado
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Estado, Parameters.Estado);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Doctype
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Doctype, Parameters.Doctype);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NombreTipoDoc
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NombreTipoDoc, Parameters.NombreTipoDoc);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Folio
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Folio, Parameters.Folio);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Fecha
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Fecha, Parameters.Fecha);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Mensaje
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Mensaje, Parameters.Mensaje);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ComprobanteXml
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ComprobanteXml, Parameters.ComprobanteXml);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IdClienteRepLegal
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IdClienteRepLegal, Parameters.IdClienteRepLegal);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NroResol
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NroResol, Parameters.NroResol);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FchResol
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FchResol, Parameters.FchResol);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IdImpuesto
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IdImpuesto, Parameters.IdImpuesto);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RutaCerts
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RutaCerts, Parameters.RutaCerts);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RutaXml
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RutaXml, Parameters.RutaXml);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EstadoActual
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EstadoActual, Parameters.EstadoActual);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MensajeEA
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MensajeEA, Parameters.MensajeEA);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IdxSingleStatus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IdxSingleStatus, Parameters.IdxSingleStatus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter USERDEF1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.USERDEF1, Parameters.USERDEF1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter EstadoContabilizado
		    {
				get
		        {
					if(_EstadoContabilizado_W == null)
	        	    {
						_EstadoContabilizado_W = TearOff.EstadoContabilizado;
					}
					return _EstadoContabilizado_W;
				}
			}

			public AggregateParameter Soptype
		    {
				get
		        {
					if(_Soptype_W == null)
	        	    {
						_Soptype_W = TearOff.Soptype;
					}
					return _Soptype_W;
				}
			}

			public AggregateParameter Docid
		    {
				get
		        {
					if(_Docid_W == null)
	        	    {
						_Docid_W = TearOff.Docid;
					}
					return _Docid_W;
				}
			}

			public AggregateParameter Sopnumbe
		    {
				get
		        {
					if(_Sopnumbe_W == null)
	        	    {
						_Sopnumbe_W = TearOff.Sopnumbe;
					}
					return _Sopnumbe_W;
				}
			}

			public AggregateParameter Fechahora
		    {
				get
		        {
					if(_Fechahora_W == null)
	        	    {
						_Fechahora_W = TearOff.Fechahora;
					}
					return _Fechahora_W;
				}
			}

			public AggregateParameter CUSTNMBR
		    {
				get
		        {
					if(_CUSTNMBR_W == null)
	        	    {
						_CUSTNMBR_W = TearOff.CUSTNMBR;
					}
					return _CUSTNMBR_W;
				}
			}

			public AggregateParameter NombreCliente
		    {
				get
		        {
					if(_NombreCliente_W == null)
	        	    {
						_NombreCliente_W = TearOff.NombreCliente;
					}
					return _NombreCliente_W;
				}
			}

			public AggregateParameter IdImpuestoCliente
		    {
				get
		        {
					if(_IdImpuestoCliente_W == null)
	        	    {
						_IdImpuestoCliente_W = TearOff.IdImpuestoCliente;
					}
					return _IdImpuestoCliente_W;
				}
			}

			public AggregateParameter Total
		    {
				get
		        {
					if(_Total_W == null)
	        	    {
						_Total_W = TearOff.Total;
					}
					return _Total_W;
				}
			}

			public AggregateParameter Voidstts
		    {
				get
		        {
					if(_Voidstts_W == null)
	        	    {
						_Voidstts_W = TearOff.Voidstts;
					}
					return _Voidstts_W;
				}
			}

			public AggregateParameter Estado
		    {
				get
		        {
					if(_Estado_W == null)
	        	    {
						_Estado_W = TearOff.Estado;
					}
					return _Estado_W;
				}
			}

			public AggregateParameter Doctype
		    {
				get
		        {
					if(_Doctype_W == null)
	        	    {
						_Doctype_W = TearOff.Doctype;
					}
					return _Doctype_W;
				}
			}

			public AggregateParameter NombreTipoDoc
		    {
				get
		        {
					if(_NombreTipoDoc_W == null)
	        	    {
						_NombreTipoDoc_W = TearOff.NombreTipoDoc;
					}
					return _NombreTipoDoc_W;
				}
			}

			public AggregateParameter Folio
		    {
				get
		        {
					if(_Folio_W == null)
	        	    {
						_Folio_W = TearOff.Folio;
					}
					return _Folio_W;
				}
			}

			public AggregateParameter Fecha
		    {
				get
		        {
					if(_Fecha_W == null)
	        	    {
						_Fecha_W = TearOff.Fecha;
					}
					return _Fecha_W;
				}
			}

			public AggregateParameter Mensaje
		    {
				get
		        {
					if(_Mensaje_W == null)
	        	    {
						_Mensaje_W = TearOff.Mensaje;
					}
					return _Mensaje_W;
				}
			}

			public AggregateParameter ComprobanteXml
		    {
				get
		        {
					if(_ComprobanteXml_W == null)
	        	    {
						_ComprobanteXml_W = TearOff.ComprobanteXml;
					}
					return _ComprobanteXml_W;
				}
			}

			public AggregateParameter IdClienteRepLegal
		    {
				get
		        {
					if(_IdClienteRepLegal_W == null)
	        	    {
						_IdClienteRepLegal_W = TearOff.IdClienteRepLegal;
					}
					return _IdClienteRepLegal_W;
				}
			}

			public AggregateParameter NroResol
		    {
				get
		        {
					if(_NroResol_W == null)
	        	    {
						_NroResol_W = TearOff.NroResol;
					}
					return _NroResol_W;
				}
			}

			public AggregateParameter FchResol
		    {
				get
		        {
					if(_FchResol_W == null)
	        	    {
						_FchResol_W = TearOff.FchResol;
					}
					return _FchResol_W;
				}
			}

			public AggregateParameter IdImpuesto
		    {
				get
		        {
					if(_IdImpuesto_W == null)
	        	    {
						_IdImpuesto_W = TearOff.IdImpuesto;
					}
					return _IdImpuesto_W;
				}
			}

			public AggregateParameter RutaCerts
		    {
				get
		        {
					if(_RutaCerts_W == null)
	        	    {
						_RutaCerts_W = TearOff.RutaCerts;
					}
					return _RutaCerts_W;
				}
			}

			public AggregateParameter RutaXml
		    {
				get
		        {
					if(_RutaXml_W == null)
	        	    {
						_RutaXml_W = TearOff.RutaXml;
					}
					return _RutaXml_W;
				}
			}

			public AggregateParameter EstadoActual
		    {
				get
		        {
					if(_EstadoActual_W == null)
	        	    {
						_EstadoActual_W = TearOff.EstadoActual;
					}
					return _EstadoActual_W;
				}
			}

			public AggregateParameter MensajeEA
		    {
				get
		        {
					if(_MensajeEA_W == null)
	        	    {
						_MensajeEA_W = TearOff.MensajeEA;
					}
					return _MensajeEA_W;
				}
			}

			public AggregateParameter IdxSingleStatus
		    {
				get
		        {
					if(_IdxSingleStatus_W == null)
	        	    {
						_IdxSingleStatus_W = TearOff.IdxSingleStatus;
					}
					return _IdxSingleStatus_W;
				}
			}

			public AggregateParameter USERDEF1
		    {
				get
		        {
					if(_USERDEF1_W == null)
	        	    {
						_USERDEF1_W = TearOff.USERDEF1;
					}
					return _USERDEF1_W;
				}
			}

			private AggregateParameter _EstadoContabilizado_W = null;
			private AggregateParameter _Soptype_W = null;
			private AggregateParameter _Docid_W = null;
			private AggregateParameter _Sopnumbe_W = null;
			private AggregateParameter _Fechahora_W = null;
			private AggregateParameter _CUSTNMBR_W = null;
			private AggregateParameter _NombreCliente_W = null;
			private AggregateParameter _IdImpuestoCliente_W = null;
			private AggregateParameter _Total_W = null;
			private AggregateParameter _Voidstts_W = null;
			private AggregateParameter _Estado_W = null;
			private AggregateParameter _Doctype_W = null;
			private AggregateParameter _NombreTipoDoc_W = null;
			private AggregateParameter _Folio_W = null;
			private AggregateParameter _Fecha_W = null;
			private AggregateParameter _Mensaje_W = null;
			private AggregateParameter _ComprobanteXml_W = null;
			private AggregateParameter _IdClienteRepLegal_W = null;
			private AggregateParameter _NroResol_W = null;
			private AggregateParameter _FchResol_W = null;
			private AggregateParameter _IdImpuesto_W = null;
			private AggregateParameter _RutaCerts_W = null;
			private AggregateParameter _RutaXml_W = null;
			private AggregateParameter _EstadoActual_W = null;
			private AggregateParameter _MensajeEA_W = null;
			private AggregateParameter _IdxSingleStatus_W = null;
			private AggregateParameter _USERDEF1_W = null;

			public void AggregateClauseReset()
			{
				_EstadoContabilizado_W = null;
				_Soptype_W = null;
				_Docid_W = null;
				_Sopnumbe_W = null;
				_Fechahora_W = null;
				_CUSTNMBR_W = null;
				_NombreCliente_W = null;
				_IdImpuestoCliente_W = null;
				_Total_W = null;
				_Voidstts_W = null;
				_Estado_W = null;
				_Doctype_W = null;
				_NombreTipoDoc_W = null;
				_Folio_W = null;
				_Fecha_W = null;
				_Mensaje_W = null;
				_ComprobanteXml_W = null;
				_IdClienteRepLegal_W = null;
				_NroResol_W = null;
				_FchResol_W = null;
				_IdImpuesto_W = null;
				_RutaCerts_W = null;
				_RutaXml_W = null;
				_EstadoActual_W = null;
				_MensajeEA_W = null;
				_IdxSingleStatus_W = null;
				_USERDEF1_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
			return null;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
			return null;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
			return null;
		}
	}
}
