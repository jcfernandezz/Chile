
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace cfd.FacturaElectronica
{
	public abstract class _cfdLogFacturaCompra : SqlClientEntity
	{
		public _cfdLogFacturaCompra()
		{
			this.QuerySource = "cfdLogFacturaCompra";
			this.MappingName = "cfdLogFacturaCompra";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_cfdLogFacturaCompraLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(short Tipo, string Folio, string IdImpuestoTercero, string Estado)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.Tipo, Tipo);

parameters.Add(Parameters.Folio, Folio);

parameters.Add(Parameters.IdImpuestoTercero, IdImpuestoTercero);

parameters.Add(Parameters.Estado, Estado);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_cfdLogFacturaCompraLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter Secuencia
			{
				get
				{
					return new SqlParameter("@Secuencia", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Tipo
			{
				get
				{
					return new SqlParameter("@Tipo", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter Folio
			{
				get
				{
					return new SqlParameter("@Folio", SqlDbType.VarChar, 21);
				}
			}
			
			public static SqlParameter IdImpuestoTercero
			{
				get
				{
					return new SqlParameter("@IdImpuestoTercero", SqlDbType.VarChar, 15);
				}
			}
			
			public static SqlParameter NombreTercero
			{
				get
				{
					return new SqlParameter("@NombreTercero", SqlDbType.VarChar, 35);
				}
			}
			
			public static SqlParameter FechaRecepcion
			{
				get
				{
					return new SqlParameter("@FechaRecepcion", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter Estado
			{
				get
				{
					return new SqlParameter("@Estado", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter EstadoActual
			{
				get
				{
					return new SqlParameter("@EstadoActual", SqlDbType.VarChar, 20);
				}
			}
			
			public static SqlParameter IdxSingleStatus
			{
				get
				{
					return new SqlParameter("@IdxSingleStatus", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter MensajeEA
			{
				get
				{
					return new SqlParameter("@MensajeEA", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter Mensaje
			{
				get
				{
					return new SqlParameter("@Mensaje", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter ArchivoXML
			{
				get
				{
					return new SqlParameter("@ArchivoXML", SqlDbType.Xml, 1073741823);
				}
			}
			
			public static SqlParameter ArchivoPDF
			{
				get
				{
					return new SqlParameter("@ArchivoPDF", SqlDbType.VarChar, 255);
				}
			}
			
			public static SqlParameter IdExterno
			{
				get
				{
					return new SqlParameter("@IdExterno", SqlDbType.VarChar, 25);
				}
			}
			
			public static SqlParameter FechaAlta
			{
				get
				{
					return new SqlParameter("@FechaAlta", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IdUsuario
			{
				get
				{
					return new SqlParameter("@IdUsuario", SqlDbType.VarChar, 10);
				}
			}
			
			public static SqlParameter FechaModificacion
			{
				get
				{
					return new SqlParameter("@FechaModificacion", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IdUsuarioModificacion
			{
				get
				{
					return new SqlParameter("@IdUsuarioModificacion", SqlDbType.VarChar, 10);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string Secuencia = "secuencia";
            public const string Tipo = "tipo";
            public const string Folio = "folio";
            public const string IdImpuestoTercero = "idImpuestoTercero";
            public const string NombreTercero = "nombreTercero";
            public const string FechaRecepcion = "fechaRecepcion";
            public const string Estado = "estado";
            public const string EstadoActual = "estadoActual";
            public const string IdxSingleStatus = "idxSingleStatus";
            public const string MensajeEA = "mensajeEA";
            public const string Mensaje = "mensaje";
            public const string ArchivoXML = "archivoXML";
            public const string ArchivoPDF = "archivoPDF";
            public const string IdExterno = "idExterno";
            public const string FechaAlta = "fechaAlta";
            public const string IdUsuario = "idUsuario";
            public const string FechaModificacion = "fechaModificacion";
            public const string IdUsuarioModificacion = "idUsuarioModificacion";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Secuencia] = _cfdLogFacturaCompra.PropertyNames.Secuencia;
					ht[Tipo] = _cfdLogFacturaCompra.PropertyNames.Tipo;
					ht[Folio] = _cfdLogFacturaCompra.PropertyNames.Folio;
					ht[IdImpuestoTercero] = _cfdLogFacturaCompra.PropertyNames.IdImpuestoTercero;
					ht[NombreTercero] = _cfdLogFacturaCompra.PropertyNames.NombreTercero;
					ht[FechaRecepcion] = _cfdLogFacturaCompra.PropertyNames.FechaRecepcion;
					ht[Estado] = _cfdLogFacturaCompra.PropertyNames.Estado;
					ht[EstadoActual] = _cfdLogFacturaCompra.PropertyNames.EstadoActual;
					ht[IdxSingleStatus] = _cfdLogFacturaCompra.PropertyNames.IdxSingleStatus;
					ht[MensajeEA] = _cfdLogFacturaCompra.PropertyNames.MensajeEA;
					ht[Mensaje] = _cfdLogFacturaCompra.PropertyNames.Mensaje;
					ht[ArchivoXML] = _cfdLogFacturaCompra.PropertyNames.ArchivoXML;
					ht[ArchivoPDF] = _cfdLogFacturaCompra.PropertyNames.ArchivoPDF;
					ht[IdExterno] = _cfdLogFacturaCompra.PropertyNames.IdExterno;
					ht[FechaAlta] = _cfdLogFacturaCompra.PropertyNames.FechaAlta;
					ht[IdUsuario] = _cfdLogFacturaCompra.PropertyNames.IdUsuario;
					ht[FechaModificacion] = _cfdLogFacturaCompra.PropertyNames.FechaModificacion;
					ht[IdUsuarioModificacion] = _cfdLogFacturaCompra.PropertyNames.IdUsuarioModificacion;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string Secuencia = "Secuencia";
            public const string Tipo = "Tipo";
            public const string Folio = "Folio";
            public const string IdImpuestoTercero = "IdImpuestoTercero";
            public const string NombreTercero = "NombreTercero";
            public const string FechaRecepcion = "FechaRecepcion";
            public const string Estado = "Estado";
            public const string EstadoActual = "EstadoActual";
            public const string IdxSingleStatus = "IdxSingleStatus";
            public const string MensajeEA = "MensajeEA";
            public const string Mensaje = "Mensaje";
            public const string ArchivoXML = "ArchivoXML";
            public const string ArchivoPDF = "ArchivoPDF";
            public const string IdExterno = "IdExterno";
            public const string FechaAlta = "FechaAlta";
            public const string IdUsuario = "IdUsuario";
            public const string FechaModificacion = "FechaModificacion";
            public const string IdUsuarioModificacion = "IdUsuarioModificacion";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[Secuencia] = _cfdLogFacturaCompra.ColumnNames.Secuencia;
					ht[Tipo] = _cfdLogFacturaCompra.ColumnNames.Tipo;
					ht[Folio] = _cfdLogFacturaCompra.ColumnNames.Folio;
					ht[IdImpuestoTercero] = _cfdLogFacturaCompra.ColumnNames.IdImpuestoTercero;
					ht[NombreTercero] = _cfdLogFacturaCompra.ColumnNames.NombreTercero;
					ht[FechaRecepcion] = _cfdLogFacturaCompra.ColumnNames.FechaRecepcion;
					ht[Estado] = _cfdLogFacturaCompra.ColumnNames.Estado;
					ht[EstadoActual] = _cfdLogFacturaCompra.ColumnNames.EstadoActual;
					ht[IdxSingleStatus] = _cfdLogFacturaCompra.ColumnNames.IdxSingleStatus;
					ht[MensajeEA] = _cfdLogFacturaCompra.ColumnNames.MensajeEA;
					ht[Mensaje] = _cfdLogFacturaCompra.ColumnNames.Mensaje;
					ht[ArchivoXML] = _cfdLogFacturaCompra.ColumnNames.ArchivoXML;
					ht[ArchivoPDF] = _cfdLogFacturaCompra.ColumnNames.ArchivoPDF;
					ht[IdExterno] = _cfdLogFacturaCompra.ColumnNames.IdExterno;
					ht[FechaAlta] = _cfdLogFacturaCompra.ColumnNames.FechaAlta;
					ht[IdUsuario] = _cfdLogFacturaCompra.ColumnNames.IdUsuario;
					ht[FechaModificacion] = _cfdLogFacturaCompra.ColumnNames.FechaModificacion;
					ht[IdUsuarioModificacion] = _cfdLogFacturaCompra.ColumnNames.IdUsuarioModificacion;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string Secuencia = "s_Secuencia";
            public const string Tipo = "s_Tipo";
            public const string Folio = "s_Folio";
            public const string IdImpuestoTercero = "s_IdImpuestoTercero";
            public const string NombreTercero = "s_NombreTercero";
            public const string FechaRecepcion = "s_FechaRecepcion";
            public const string Estado = "s_Estado";
            public const string EstadoActual = "s_EstadoActual";
            public const string IdxSingleStatus = "s_IdxSingleStatus";
            public const string MensajeEA = "s_MensajeEA";
            public const string Mensaje = "s_Mensaje";
            public const string ArchivoXML = "s_ArchivoXML";
            public const string ArchivoPDF = "s_ArchivoPDF";
            public const string IdExterno = "s_IdExterno";
            public const string FechaAlta = "s_FechaAlta";
            public const string IdUsuario = "s_IdUsuario";
            public const string FechaModificacion = "s_FechaModificacion";
            public const string IdUsuarioModificacion = "s_IdUsuarioModificacion";

		}
		#endregion		
		
		#region Properties
	
		public virtual int Secuencia
	    {
			get
	        {
				return base.Getint(ColumnNames.Secuencia);
			}
			set
	        {
				base.Setint(ColumnNames.Secuencia, value);
			}
		}

		public virtual short Tipo
	    {
			get
	        {
				return base.Getshort(ColumnNames.Tipo);
			}
			set
	        {
				base.Setshort(ColumnNames.Tipo, value);
			}
		}

		public virtual string Folio
	    {
			get
	        {
				return base.Getstring(ColumnNames.Folio);
			}
			set
	        {
				base.Setstring(ColumnNames.Folio, value);
			}
		}

		public virtual string IdImpuestoTercero
	    {
			get
	        {
				return base.Getstring(ColumnNames.IdImpuestoTercero);
			}
			set
	        {
				base.Setstring(ColumnNames.IdImpuestoTercero, value);
			}
		}

		public virtual string NombreTercero
	    {
			get
	        {
				return base.Getstring(ColumnNames.NombreTercero);
			}
			set
	        {
				base.Setstring(ColumnNames.NombreTercero, value);
			}
		}

		public virtual DateTime FechaRecepcion
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.FechaRecepcion);
			}
			set
	        {
				base.SetDateTime(ColumnNames.FechaRecepcion, value);
			}
		}

		public virtual string Estado
	    {
			get
	        {
				return base.Getstring(ColumnNames.Estado);
			}
			set
	        {
				base.Setstring(ColumnNames.Estado, value);
			}
		}

		public virtual string EstadoActual
	    {
			get
	        {
				return base.Getstring(ColumnNames.EstadoActual);
			}
			set
	        {
				base.Setstring(ColumnNames.EstadoActual, value);
			}
		}

		public virtual short IdxSingleStatus
	    {
			get
	        {
				return base.Getshort(ColumnNames.IdxSingleStatus);
			}
			set
	        {
				base.Setshort(ColumnNames.IdxSingleStatus, value);
			}
		}

		public virtual string MensajeEA
	    {
			get
	        {
				return base.Getstring(ColumnNames.MensajeEA);
			}
			set
	        {
				base.Setstring(ColumnNames.MensajeEA, value);
			}
		}

		public virtual string Mensaje
	    {
			get
	        {
				return base.Getstring(ColumnNames.Mensaje);
			}
			set
	        {
				base.Setstring(ColumnNames.Mensaje, value);
			}
		}

		public virtual string ArchivoXML
	    {
			get
	        {
				return base.Getstring(ColumnNames.ArchivoXML);
			}
			set
	        {
				base.Setstring(ColumnNames.ArchivoXML, value);
			}
		}

		public virtual string ArchivoPDF
	    {
			get
	        {
				return base.Getstring(ColumnNames.ArchivoPDF);
			}
			set
	        {
				base.Setstring(ColumnNames.ArchivoPDF, value);
			}
		}

		public virtual string IdExterno
	    {
			get
	        {
				return base.Getstring(ColumnNames.IdExterno);
			}
			set
	        {
				base.Setstring(ColumnNames.IdExterno, value);
			}
		}

		public virtual DateTime FechaAlta
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.FechaAlta);
			}
			set
	        {
				base.SetDateTime(ColumnNames.FechaAlta, value);
			}
		}

		public virtual string IdUsuario
	    {
			get
	        {
				return base.Getstring(ColumnNames.IdUsuario);
			}
			set
	        {
				base.Setstring(ColumnNames.IdUsuario, value);
			}
		}

		public virtual DateTime FechaModificacion
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.FechaModificacion);
			}
			set
	        {
				base.SetDateTime(ColumnNames.FechaModificacion, value);
			}
		}

		public virtual string IdUsuarioModificacion
	    {
			get
	        {
				return base.Getstring(ColumnNames.IdUsuarioModificacion);
			}
			set
	        {
				base.Setstring(ColumnNames.IdUsuarioModificacion, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_Secuencia
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Secuencia) ? string.Empty : base.GetintAsString(ColumnNames.Secuencia);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Secuencia);
				else
					this.Secuencia = base.SetintAsString(ColumnNames.Secuencia, value);
			}
		}

		public virtual string s_Tipo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Tipo) ? string.Empty : base.GetshortAsString(ColumnNames.Tipo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Tipo);
				else
					this.Tipo = base.SetshortAsString(ColumnNames.Tipo, value);
			}
		}

		public virtual string s_Folio
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Folio) ? string.Empty : base.GetstringAsString(ColumnNames.Folio);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Folio);
				else
					this.Folio = base.SetstringAsString(ColumnNames.Folio, value);
			}
		}

		public virtual string s_IdImpuestoTercero
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IdImpuestoTercero) ? string.Empty : base.GetstringAsString(ColumnNames.IdImpuestoTercero);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IdImpuestoTercero);
				else
					this.IdImpuestoTercero = base.SetstringAsString(ColumnNames.IdImpuestoTercero, value);
			}
		}

		public virtual string s_NombreTercero
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NombreTercero) ? string.Empty : base.GetstringAsString(ColumnNames.NombreTercero);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NombreTercero);
				else
					this.NombreTercero = base.SetstringAsString(ColumnNames.NombreTercero, value);
			}
		}

		public virtual string s_FechaRecepcion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FechaRecepcion) ? string.Empty : base.GetDateTimeAsString(ColumnNames.FechaRecepcion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FechaRecepcion);
				else
					this.FechaRecepcion = base.SetDateTimeAsString(ColumnNames.FechaRecepcion, value);
			}
		}

		public virtual string s_Estado
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Estado) ? string.Empty : base.GetstringAsString(ColumnNames.Estado);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Estado);
				else
					this.Estado = base.SetstringAsString(ColumnNames.Estado, value);
			}
		}

		public virtual string s_EstadoActual
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EstadoActual) ? string.Empty : base.GetstringAsString(ColumnNames.EstadoActual);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EstadoActual);
				else
					this.EstadoActual = base.SetstringAsString(ColumnNames.EstadoActual, value);
			}
		}

		public virtual string s_IdxSingleStatus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IdxSingleStatus) ? string.Empty : base.GetshortAsString(ColumnNames.IdxSingleStatus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IdxSingleStatus);
				else
					this.IdxSingleStatus = base.SetshortAsString(ColumnNames.IdxSingleStatus, value);
			}
		}

		public virtual string s_MensajeEA
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MensajeEA) ? string.Empty : base.GetstringAsString(ColumnNames.MensajeEA);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MensajeEA);
				else
					this.MensajeEA = base.SetstringAsString(ColumnNames.MensajeEA, value);
			}
		}

		public virtual string s_Mensaje
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Mensaje) ? string.Empty : base.GetstringAsString(ColumnNames.Mensaje);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Mensaje);
				else
					this.Mensaje = base.SetstringAsString(ColumnNames.Mensaje, value);
			}
		}

		public virtual string s_ArchivoXML
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ArchivoXML) ? string.Empty : base.GetstringAsString(ColumnNames.ArchivoXML);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ArchivoXML);
				else
					this.ArchivoXML = base.SetstringAsString(ColumnNames.ArchivoXML, value);
			}
		}

		public virtual string s_ArchivoPDF
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ArchivoPDF) ? string.Empty : base.GetstringAsString(ColumnNames.ArchivoPDF);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ArchivoPDF);
				else
					this.ArchivoPDF = base.SetstringAsString(ColumnNames.ArchivoPDF, value);
			}
		}

		public virtual string s_IdExterno
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IdExterno) ? string.Empty : base.GetstringAsString(ColumnNames.IdExterno);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IdExterno);
				else
					this.IdExterno = base.SetstringAsString(ColumnNames.IdExterno, value);
			}
		}

		public virtual string s_FechaAlta
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FechaAlta) ? string.Empty : base.GetDateTimeAsString(ColumnNames.FechaAlta);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FechaAlta);
				else
					this.FechaAlta = base.SetDateTimeAsString(ColumnNames.FechaAlta, value);
			}
		}

		public virtual string s_IdUsuario
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IdUsuario) ? string.Empty : base.GetstringAsString(ColumnNames.IdUsuario);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IdUsuario);
				else
					this.IdUsuario = base.SetstringAsString(ColumnNames.IdUsuario, value);
			}
		}

		public virtual string s_FechaModificacion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FechaModificacion) ? string.Empty : base.GetDateTimeAsString(ColumnNames.FechaModificacion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FechaModificacion);
				else
					this.FechaModificacion = base.SetDateTimeAsString(ColumnNames.FechaModificacion, value);
			}
		}

		public virtual string s_IdUsuarioModificacion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IdUsuarioModificacion) ? string.Empty : base.GetstringAsString(ColumnNames.IdUsuarioModificacion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IdUsuarioModificacion);
				else
					this.IdUsuarioModificacion = base.SetstringAsString(ColumnNames.IdUsuarioModificacion, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter Secuencia
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Secuencia, Parameters.Secuencia);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Tipo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Tipo, Parameters.Tipo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Folio
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Folio, Parameters.Folio);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IdImpuestoTercero
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IdImpuestoTercero, Parameters.IdImpuestoTercero);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NombreTercero
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NombreTercero, Parameters.NombreTercero);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FechaRecepcion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FechaRecepcion, Parameters.FechaRecepcion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Estado
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Estado, Parameters.Estado);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EstadoActual
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EstadoActual, Parameters.EstadoActual);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IdxSingleStatus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IdxSingleStatus, Parameters.IdxSingleStatus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MensajeEA
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MensajeEA, Parameters.MensajeEA);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Mensaje
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Mensaje, Parameters.Mensaje);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ArchivoXML
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ArchivoXML, Parameters.ArchivoXML);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ArchivoPDF
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ArchivoPDF, Parameters.ArchivoPDF);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IdExterno
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IdExterno, Parameters.IdExterno);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FechaAlta
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FechaAlta, Parameters.FechaAlta);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IdUsuario
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IdUsuario, Parameters.IdUsuario);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FechaModificacion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FechaModificacion, Parameters.FechaModificacion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IdUsuarioModificacion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IdUsuarioModificacion, Parameters.IdUsuarioModificacion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter Secuencia
		    {
				get
		        {
					if(_Secuencia_W == null)
	        	    {
						_Secuencia_W = TearOff.Secuencia;
					}
					return _Secuencia_W;
				}
			}

			public WhereParameter Tipo
		    {
				get
		        {
					if(_Tipo_W == null)
	        	    {
						_Tipo_W = TearOff.Tipo;
					}
					return _Tipo_W;
				}
			}

			public WhereParameter Folio
		    {
				get
		        {
					if(_Folio_W == null)
	        	    {
						_Folio_W = TearOff.Folio;
					}
					return _Folio_W;
				}
			}

			public WhereParameter IdImpuestoTercero
		    {
				get
		        {
					if(_IdImpuestoTercero_W == null)
	        	    {
						_IdImpuestoTercero_W = TearOff.IdImpuestoTercero;
					}
					return _IdImpuestoTercero_W;
				}
			}

			public WhereParameter NombreTercero
		    {
				get
		        {
					if(_NombreTercero_W == null)
	        	    {
						_NombreTercero_W = TearOff.NombreTercero;
					}
					return _NombreTercero_W;
				}
			}

			public WhereParameter FechaRecepcion
		    {
				get
		        {
					if(_FechaRecepcion_W == null)
	        	    {
						_FechaRecepcion_W = TearOff.FechaRecepcion;
					}
					return _FechaRecepcion_W;
				}
			}

			public WhereParameter Estado
		    {
				get
		        {
					if(_Estado_W == null)
	        	    {
						_Estado_W = TearOff.Estado;
					}
					return _Estado_W;
				}
			}

			public WhereParameter EstadoActual
		    {
				get
		        {
					if(_EstadoActual_W == null)
	        	    {
						_EstadoActual_W = TearOff.EstadoActual;
					}
					return _EstadoActual_W;
				}
			}

			public WhereParameter IdxSingleStatus
		    {
				get
		        {
					if(_IdxSingleStatus_W == null)
	        	    {
						_IdxSingleStatus_W = TearOff.IdxSingleStatus;
					}
					return _IdxSingleStatus_W;
				}
			}

			public WhereParameter MensajeEA
		    {
				get
		        {
					if(_MensajeEA_W == null)
	        	    {
						_MensajeEA_W = TearOff.MensajeEA;
					}
					return _MensajeEA_W;
				}
			}

			public WhereParameter Mensaje
		    {
				get
		        {
					if(_Mensaje_W == null)
	        	    {
						_Mensaje_W = TearOff.Mensaje;
					}
					return _Mensaje_W;
				}
			}

			public WhereParameter ArchivoXML
		    {
				get
		        {
					if(_ArchivoXML_W == null)
	        	    {
						_ArchivoXML_W = TearOff.ArchivoXML;
					}
					return _ArchivoXML_W;
				}
			}

			public WhereParameter ArchivoPDF
		    {
				get
		        {
					if(_ArchivoPDF_W == null)
	        	    {
						_ArchivoPDF_W = TearOff.ArchivoPDF;
					}
					return _ArchivoPDF_W;
				}
			}

			public WhereParameter IdExterno
		    {
				get
		        {
					if(_IdExterno_W == null)
	        	    {
						_IdExterno_W = TearOff.IdExterno;
					}
					return _IdExterno_W;
				}
			}

			public WhereParameter FechaAlta
		    {
				get
		        {
					if(_FechaAlta_W == null)
	        	    {
						_FechaAlta_W = TearOff.FechaAlta;
					}
					return _FechaAlta_W;
				}
			}

			public WhereParameter IdUsuario
		    {
				get
		        {
					if(_IdUsuario_W == null)
	        	    {
						_IdUsuario_W = TearOff.IdUsuario;
					}
					return _IdUsuario_W;
				}
			}

			public WhereParameter FechaModificacion
		    {
				get
		        {
					if(_FechaModificacion_W == null)
	        	    {
						_FechaModificacion_W = TearOff.FechaModificacion;
					}
					return _FechaModificacion_W;
				}
			}

			public WhereParameter IdUsuarioModificacion
		    {
				get
		        {
					if(_IdUsuarioModificacion_W == null)
	        	    {
						_IdUsuarioModificacion_W = TearOff.IdUsuarioModificacion;
					}
					return _IdUsuarioModificacion_W;
				}
			}

			private WhereParameter _Secuencia_W = null;
			private WhereParameter _Tipo_W = null;
			private WhereParameter _Folio_W = null;
			private WhereParameter _IdImpuestoTercero_W = null;
			private WhereParameter _NombreTercero_W = null;
			private WhereParameter _FechaRecepcion_W = null;
			private WhereParameter _Estado_W = null;
			private WhereParameter _EstadoActual_W = null;
			private WhereParameter _IdxSingleStatus_W = null;
			private WhereParameter _MensajeEA_W = null;
			private WhereParameter _Mensaje_W = null;
			private WhereParameter _ArchivoXML_W = null;
			private WhereParameter _ArchivoPDF_W = null;
			private WhereParameter _IdExterno_W = null;
			private WhereParameter _FechaAlta_W = null;
			private WhereParameter _IdUsuario_W = null;
			private WhereParameter _FechaModificacion_W = null;
			private WhereParameter _IdUsuarioModificacion_W = null;

			public void WhereClauseReset()
			{
				_Secuencia_W = null;
				_Tipo_W = null;
				_Folio_W = null;
				_IdImpuestoTercero_W = null;
				_NombreTercero_W = null;
				_FechaRecepcion_W = null;
				_Estado_W = null;
				_EstadoActual_W = null;
				_IdxSingleStatus_W = null;
				_MensajeEA_W = null;
				_Mensaje_W = null;
				_ArchivoXML_W = null;
				_ArchivoPDF_W = null;
				_IdExterno_W = null;
				_FechaAlta_W = null;
				_IdUsuario_W = null;
				_FechaModificacion_W = null;
				_IdUsuarioModificacion_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter Secuencia
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Secuencia, Parameters.Secuencia);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Tipo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Tipo, Parameters.Tipo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Folio
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Folio, Parameters.Folio);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IdImpuestoTercero
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IdImpuestoTercero, Parameters.IdImpuestoTercero);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NombreTercero
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NombreTercero, Parameters.NombreTercero);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FechaRecepcion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FechaRecepcion, Parameters.FechaRecepcion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Estado
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Estado, Parameters.Estado);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EstadoActual
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EstadoActual, Parameters.EstadoActual);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IdxSingleStatus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IdxSingleStatus, Parameters.IdxSingleStatus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MensajeEA
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MensajeEA, Parameters.MensajeEA);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Mensaje
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Mensaje, Parameters.Mensaje);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ArchivoXML
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ArchivoXML, Parameters.ArchivoXML);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ArchivoPDF
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ArchivoPDF, Parameters.ArchivoPDF);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IdExterno
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IdExterno, Parameters.IdExterno);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FechaAlta
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FechaAlta, Parameters.FechaAlta);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IdUsuario
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IdUsuario, Parameters.IdUsuario);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FechaModificacion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FechaModificacion, Parameters.FechaModificacion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IdUsuarioModificacion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IdUsuarioModificacion, Parameters.IdUsuarioModificacion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter Secuencia
		    {
				get
		        {
					if(_Secuencia_W == null)
	        	    {
						_Secuencia_W = TearOff.Secuencia;
					}
					return _Secuencia_W;
				}
			}

			public AggregateParameter Tipo
		    {
				get
		        {
					if(_Tipo_W == null)
	        	    {
						_Tipo_W = TearOff.Tipo;
					}
					return _Tipo_W;
				}
			}

			public AggregateParameter Folio
		    {
				get
		        {
					if(_Folio_W == null)
	        	    {
						_Folio_W = TearOff.Folio;
					}
					return _Folio_W;
				}
			}

			public AggregateParameter IdImpuestoTercero
		    {
				get
		        {
					if(_IdImpuestoTercero_W == null)
	        	    {
						_IdImpuestoTercero_W = TearOff.IdImpuestoTercero;
					}
					return _IdImpuestoTercero_W;
				}
			}

			public AggregateParameter NombreTercero
		    {
				get
		        {
					if(_NombreTercero_W == null)
	        	    {
						_NombreTercero_W = TearOff.NombreTercero;
					}
					return _NombreTercero_W;
				}
			}

			public AggregateParameter FechaRecepcion
		    {
				get
		        {
					if(_FechaRecepcion_W == null)
	        	    {
						_FechaRecepcion_W = TearOff.FechaRecepcion;
					}
					return _FechaRecepcion_W;
				}
			}

			public AggregateParameter Estado
		    {
				get
		        {
					if(_Estado_W == null)
	        	    {
						_Estado_W = TearOff.Estado;
					}
					return _Estado_W;
				}
			}

			public AggregateParameter EstadoActual
		    {
				get
		        {
					if(_EstadoActual_W == null)
	        	    {
						_EstadoActual_W = TearOff.EstadoActual;
					}
					return _EstadoActual_W;
				}
			}

			public AggregateParameter IdxSingleStatus
		    {
				get
		        {
					if(_IdxSingleStatus_W == null)
	        	    {
						_IdxSingleStatus_W = TearOff.IdxSingleStatus;
					}
					return _IdxSingleStatus_W;
				}
			}

			public AggregateParameter MensajeEA
		    {
				get
		        {
					if(_MensajeEA_W == null)
	        	    {
						_MensajeEA_W = TearOff.MensajeEA;
					}
					return _MensajeEA_W;
				}
			}

			public AggregateParameter Mensaje
		    {
				get
		        {
					if(_Mensaje_W == null)
	        	    {
						_Mensaje_W = TearOff.Mensaje;
					}
					return _Mensaje_W;
				}
			}

			public AggregateParameter ArchivoXML
		    {
				get
		        {
					if(_ArchivoXML_W == null)
	        	    {
						_ArchivoXML_W = TearOff.ArchivoXML;
					}
					return _ArchivoXML_W;
				}
			}

			public AggregateParameter ArchivoPDF
		    {
				get
		        {
					if(_ArchivoPDF_W == null)
	        	    {
						_ArchivoPDF_W = TearOff.ArchivoPDF;
					}
					return _ArchivoPDF_W;
				}
			}

			public AggregateParameter IdExterno
		    {
				get
		        {
					if(_IdExterno_W == null)
	        	    {
						_IdExterno_W = TearOff.IdExterno;
					}
					return _IdExterno_W;
				}
			}

			public AggregateParameter FechaAlta
		    {
				get
		        {
					if(_FechaAlta_W == null)
	        	    {
						_FechaAlta_W = TearOff.FechaAlta;
					}
					return _FechaAlta_W;
				}
			}

			public AggregateParameter IdUsuario
		    {
				get
		        {
					if(_IdUsuario_W == null)
	        	    {
						_IdUsuario_W = TearOff.IdUsuario;
					}
					return _IdUsuario_W;
				}
			}

			public AggregateParameter FechaModificacion
		    {
				get
		        {
					if(_FechaModificacion_W == null)
	        	    {
						_FechaModificacion_W = TearOff.FechaModificacion;
					}
					return _FechaModificacion_W;
				}
			}

			public AggregateParameter IdUsuarioModificacion
		    {
				get
		        {
					if(_IdUsuarioModificacion_W == null)
	        	    {
						_IdUsuarioModificacion_W = TearOff.IdUsuarioModificacion;
					}
					return _IdUsuarioModificacion_W;
				}
			}

			private AggregateParameter _Secuencia_W = null;
			private AggregateParameter _Tipo_W = null;
			private AggregateParameter _Folio_W = null;
			private AggregateParameter _IdImpuestoTercero_W = null;
			private AggregateParameter _NombreTercero_W = null;
			private AggregateParameter _FechaRecepcion_W = null;
			private AggregateParameter _Estado_W = null;
			private AggregateParameter _EstadoActual_W = null;
			private AggregateParameter _IdxSingleStatus_W = null;
			private AggregateParameter _MensajeEA_W = null;
			private AggregateParameter _Mensaje_W = null;
			private AggregateParameter _ArchivoXML_W = null;
			private AggregateParameter _ArchivoPDF_W = null;
			private AggregateParameter _IdExterno_W = null;
			private AggregateParameter _FechaAlta_W = null;
			private AggregateParameter _IdUsuario_W = null;
			private AggregateParameter _FechaModificacion_W = null;
			private AggregateParameter _IdUsuarioModificacion_W = null;

			public void AggregateClauseReset()
			{
				_Secuencia_W = null;
				_Tipo_W = null;
				_Folio_W = null;
				_IdImpuestoTercero_W = null;
				_NombreTercero_W = null;
				_FechaRecepcion_W = null;
				_Estado_W = null;
				_EstadoActual_W = null;
				_IdxSingleStatus_W = null;
				_MensajeEA_W = null;
				_Mensaje_W = null;
				_ArchivoXML_W = null;
				_ArchivoPDF_W = null;
				_IdExterno_W = null;
				_FechaAlta_W = null;
				_IdUsuario_W = null;
				_FechaModificacion_W = null;
				_IdUsuarioModificacion_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_cfdLogFacturaCompraInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.Secuencia.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_cfdLogFacturaCompraUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_cfdLogFacturaCompraDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.Tipo);
			p.SourceColumn = ColumnNames.Tipo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Folio);
			p.SourceColumn = ColumnNames.Folio;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IdImpuestoTercero);
			p.SourceColumn = ColumnNames.IdImpuestoTercero;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Estado);
			p.SourceColumn = ColumnNames.Estado;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.Secuencia);
			p.SourceColumn = ColumnNames.Secuencia;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Tipo);
			p.SourceColumn = ColumnNames.Tipo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Folio);
			p.SourceColumn = ColumnNames.Folio;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IdImpuestoTercero);
			p.SourceColumn = ColumnNames.IdImpuestoTercero;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NombreTercero);
			p.SourceColumn = ColumnNames.NombreTercero;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FechaRecepcion);
			p.SourceColumn = ColumnNames.FechaRecepcion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Estado);
			p.SourceColumn = ColumnNames.Estado;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EstadoActual);
			p.SourceColumn = ColumnNames.EstadoActual;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IdxSingleStatus);
			p.SourceColumn = ColumnNames.IdxSingleStatus;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MensajeEA);
			p.SourceColumn = ColumnNames.MensajeEA;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Mensaje);
			p.SourceColumn = ColumnNames.Mensaje;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ArchivoXML);
			p.SourceColumn = ColumnNames.ArchivoXML;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ArchivoPDF);
			p.SourceColumn = ColumnNames.ArchivoPDF;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IdExterno);
			p.SourceColumn = ColumnNames.IdExterno;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FechaAlta);
			p.SourceColumn = ColumnNames.FechaAlta;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IdUsuario);
			p.SourceColumn = ColumnNames.IdUsuario;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FechaModificacion);
			p.SourceColumn = ColumnNames.FechaModificacion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IdUsuarioModificacion);
			p.SourceColumn = ColumnNames.IdUsuarioModificacion;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
